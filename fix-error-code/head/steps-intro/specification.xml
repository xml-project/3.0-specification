<specification xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="steps-intro" class="ed" version="5.0-extension w3c-xproc">
<info>
<title>XProc 3.0 Steps: An Introduction</title>
<!-- defaults to date formatted <pubdate>2014-12-18</pubdate> -->
<copyright><year>2018</year><holder>@@FIXME:</holder></copyright>

<bibliorelation type="isformatof" xlink:href="specification.xml">XML</bibliorelation>
<authorgroup>
  <author>
    <personname>Norman Walsh</personname>
  </author>
  <author>
    <personname>Achim Berndzen</personname>
  </author>
  <author>
    <personname>Gerrit Imsieke</personname>
  </author>
  <author>
    <personname>Erik Siegel</personname>
  </author>
</authorgroup>

<abstract>
  <para>This specification describes general features of the step vocabulary of
  <citetitle>XProc 3.0: An XML Pipeline Language</citetitle>.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</emphasis></para>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C.
See also
<xref linkend="credits"/>.</para>
</legalnotice>
</info>

<section xml:id="introduction">
<title>Introduction</title>

<para>Many atomic steps are available for <biblioref linkend="xproc30"/>.
They are described in several specifications.
A conformant processor <rfc2119>must</rfc2119> implement all of the steps
in <biblioref linkend="steps30"/>. Additional steps may also be implemented.
</para>

<para>This specification describes the general background common to all
steps.</para>

<para>The types given for options should be understood as follows:</para>
<itemizedlist>
  <listitem>
    <para>Types in the XML Schema namespace, identified as QNames with the
    <code>xs:</code> prefix, as per the XML Schema specification with one
    exception. Anywhere an <code>xs:QName</code> is specified,
    an
    <link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>
    is allowed.</para>
  </listitem>
  <listitem>
    <para><type>XPathExpression</type>:
    As a string per <biblioref linkend="xmlschema-2"/>, including
    whitespace normalization, and the further requirement to be a
    conformant Expression per <biblioref linkend="xpath31"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>XSLTSelectionPattern</type>: An XSLT pattern.
    </para>
  </listitem>
  <listitem>
    <para><type>XPathSequenceType</type>: An XPath
    <link xlink:href="https://www.w3.org/TR/xpath-31/#id-types">sequence type</link>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentType</type>: A media type as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentTypes</type>:
    As a whitespace separated list of media types as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
</itemizedlist>

<para>Option values are often expressed using the shortcut syntax. In
these cases, the option shortcuts are generally treated as value
templates. However, for options of type <code>map()</code> or
<code>array()</code>, an expression is <emphasis>required</emphasis>
(there is no non-expression string which can ever be a legal value for
a map or array). Given that every value entered this way will have to
be a value template, and consequently every curly brace contained
within the expression will have to be escaped, values of type map or
array are defined to be expressions directly.</para>

<para>Some aspects of documents are generally unchanged by steps:</para>

<itemizedlist>
<listitem>
<para>When a step in this library produces an output document,
the base URI of the output is the base URI of the step's primary
input document unless the step's process explicitly sets an
<tag class="attribute">xml:base</tag> attribute or the step's
description explicitly states how the base URI is constructed.</para>
</listitem>
<listitem>
<para>Each step describes how it modifies the document properties of
the documents that flow through it.</para>
<para>A great many steps indicate that they preserve some or all of
the properties of the input document. It should be noted that in some
cases the transformation performed by the step will violate the
condition associated with some property. In general, the steps cannot
know this and the pipeline author is responsible for managing the
properties with greater care in this case.
</para>
</listitem>
</itemizedlist>

<para xml:id="cv.result">Also, in this specification, several steps use this
element for result information:</para>

<e:rng-pattern name="VocabResult"/>

<para>When a step uses an XPath to compute an option value, the XPath
context is as defined in <biblioref linkend="xproc30"/>.</para>

<para>When a step specifies a particular version of a technology,
implementations <rfc2119>must</rfc2119> implement that
version or a subsequent version that is backwards compatible with that
version. At user-option, they may implement other non-backwards
compatible versions.</para>
  
<para>In this specification the words <rfc2119>must</rfc2119>, <rfc2119>must not</rfc2119>,
        <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>, <rfc2119>may</rfc2119> and
        <rfc2119>recommended</rfc2119> are to be interpreted as described in <biblioref linkend="rfc2119"/>.</para>
</section>
  
<section xml:id="qname-options">
<title>QNames as option values</title>
<para>A number of steps in the standard library and beyond need QNames as option values. E.g.
        <tag>p:add-attribute</tag> requires a name (<option>attribute-name</option>) for the new
      attribute which needs to be a QName. As a convenience for pipeline authors, the required type
      of these options is not <type>xs:QName</type>, but <type>xs:anyAtomicType</type>. As a
      consequence the respective step might be called either by explicitly giving an instance of
        <type>xs:QName</type> or by just supplying an instance of <type>xs:string</type>. The
      required QName is manufactured from the given string value and two other options on the same
      step, one optionally supplying a prefix for the QName (e.g.
      <option>attribute-prefix</option>), and the other optionally holding the namespace URI (e.g.
      <option>attribute-namespace</option>). To construct the required QName, the following rules
      are used: </para>
<orderedlist>
  <listitem>
	<para>If the value supplied for the option is an instance of <type>xs:QName</type> then this value
          is used. <error code="D0066">It is a <glossterm>dynamic error</glossterm> if an instance
            of <type>xs:QName</type> is provided and the value of the prefix supplying option and
            the namespace supplying option are not both empty sequences.</error>
        </para>
  </listitem>
  <listitem>
    <para>If the value supplied for the option is an instance of 
    <type>xs:string</type> (or a type 
    derived from <type>xs:string</type>) the QName is constructed using the <link xlink:href="https://www.w3.org/TR/xpath-31/#doc-xpath31-EQName">XPath EQName production rules</link>. That is, it can be written
    as a local-name only, as a prefix plus local-name or as a URI plus
    local-name (using the <code>Q{}</code> syntax). The following errors may occur:</para>
    <itemizedlist>
      <listitem>
        <para><error code="D0061">It is a 
          <glossterm>dynamic error</glossterm> if the string value cannot be converted 
          into a QName.</error></para>
      </listitem>
      <listitem>
        <para><error code="D0034">It is a <glossterm>dynamic 
          error</glossterm> to specify a new namespace or prefix if the lexical value 
          of the specified name contains a colon.</error> The corresponding expanded name 
          is used to construct the attribute.</para>
      </listitem>
      <listitem>
        <para><error code="D0069">It is a <glossterm>dynamic
          error</glossterm> if the lexical value of the specified name contains a colon and the
          prefix is not bound to a namespace URI.</error> </para>
      </listitem>
      <listitem>
        <para><error code="D0070">It is a <glossterm>dynamic error</glossterm> if a prefix suggestion
        is supplied, but no namespace URI is provided.</error></para>
      </listitem>
      <listitem>
        <para><error code="D0067">It is a 
          <glossterm>dynamic error</glossterm> to specify a namespace using the namespace
          supplying option if the <code>Q{}</code> syntax is used.</error></para>
      </listitem>
    </itemizedlist>
  </listitem>
  <listitem>
  	<para><error code="D0068">It is a <glossterm>dynamic error</glossterm> if
  	the supplied value is neither an instance of <type>xs:QName</type> nor an
  	instance of <type>xs:string</type>.</error>
  	</para>
  </listitem>
</orderedlist> 
</section>

<section xml:id="errors">
<title>Step Errors</title>

<para>Several of the steps in the standard step library can generate
<glossterm baseform="dynamic-error">dynamic errors</glossterm>.</para>

<para>A <termdef xml:id="dt-dynamic-error">A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</termdef> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space).</para>

<para>If a step fails due to a dynamic error, failure propagates
upwards until either a <tag>p:try</tag> is encountered or the entire
pipeline fails. In other words, outside of a <tag>p:try</tag>, step
failure causes the entire pipeline to fail.</para>

<para>The following errors can be raised by steps in this
specification:</para>

<?step-error-list level="none"?>

</section>

<appendix xml:id="conformance">
<title>Conformance</title>

<para>Conformant processors <rfc2119>must</rfc2119> implement all of the features
described in this specification except those that are explicitly identified
as optional.</para>

<para>Some aspects of processor behavior are not completely specified; those
features are either <glossterm role="unwrapped">implementation-dependent</glossterm> or
<glossterm role="unwrapped">implementation-defined</glossterm>.</para>

<para><termdef xml:id="dt-implementation-dependent">An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</termdef>
</para>

<para><termdef xml:id="dt-implementation-defined">An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</termdef>
</para>

<section xml:id="implementation-defined">
<title>Implementation-defined features</title>

<para>The following features are implementation-defined:</para>

<?implementation-defined-features?>
</section>

<section xml:id="implementation-dependent">
<title>Implementation-dependent features</title>

<para>The following features are implementation-dependent:</para>

<?implementation-dependent-features?>
</section>
</appendix>

<appendix xml:id="references">
<title>References</title>

<bibliolist>
  <bibliomixed xml:id="rfc2119"><abbrev>RFC 2119</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs to Indicate Requirement Levels</citetitle>.
S. Bradner.
Network Working Group, IETF,
Mar 1997.
</bibliomixed>
  <bibliomixed xml:id="xproc30"><abbrev>XProc 3.0</abbrev>
<citetitle xlink:href="http://spec.xproc.org/">XProc 3.0:
An XML Pipeline Language</citetitle>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</bibliomixed>
  <bibliomixed xml:id="steps30"><abbrev>Steps 3.0</abbrev>
<citetitle xlink:href="http://spec.xproc.org/">XProc 3.0: Standard
Step Library</citetitle>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</bibliomixed>
  <bibliomixed xml:id="xmlschema-2"><abbrev>W3C XML Schema: Part 2</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2:
Datatypes Second Edition</citetitle>.
Paul V. Biron and Ashok Malhotra, editors.
World Wide Web Consortium, 28 October 2004.
</bibliomixed>
  <bibliomixed xml:id="xpath31"><abbrev>XPath 3.1</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xpath31/">XML Path Language (XPath)
	3.1</citetitle>. Jonathan Robie, Michael Dyck, Josh Spiegel, editors.
W3C Recommendation. 21 March 2017.</bibliomixed>
  <bibliomixed xml:id="rfc2046"><abbrev>Media Types</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046:
Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</citetitle>.
N. Freed, et. al.. Network Working Group, IETF,
November, 1996.</bibliomixed>
</bibliolist>
</appendix>

<appendix xmlns:db="http://docbook.org/ns/docbook" xml:id="glossary"><title>Glossary</title><glosslist><glossentry><glossterm>dynamic
error</glossterm><glossdef><para>A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</para></glossdef></glossentry><glossentry><glossterm>implementation-defined</glossterm><glossdef><para>An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</para></glossdef></glossentry><glossentry><glossterm>implementation-dependent</glossterm><glossdef><para>An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</para></glossdef></glossentry></glosslist></appendix>

<appendix xml:id="credits">
<title>Credits</title>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C. It was developed
by the <citetitle>XML Processing Model Working Group</citetitle> and edited by
Norman Walsh, Alex Miłowski, and Henry Thompson.</para>

<para>The editors of this specification extend their gratitude to everyone
who contributed to this document and all of the versions that came before it.</para>
</appendix>

</specification>
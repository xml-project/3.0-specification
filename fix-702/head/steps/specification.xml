<specification xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="steps" class="ed" version="5.0-extension w3c-xproc">
<info>
<title>XProc 3.0: Standard Step Library</title>
<!-- defaults to date formatted <pubdate>2014-12-18</pubdate> -->
<copyright><year>2018</year><holder>@@FIXME:</holder></copyright>

<bibliorelation type="isformatof" xlink:href="specification.xml">XML</bibliorelation>
<authorgroup>
  <author>
    <personname>Norman Walsh</personname>
  </author>
  <author>
    <personname>Achim Berndzen</personname>
  </author>
  <author>
    <personname>Gerrit Imsieke</personname>
  </author>
  <author>
    <personname>Erik Siegel</personname>
  </author>
</authorgroup>

<abstract>
  <para>This specification describes the standard step vocabulary of
  <citetitle>XProc 3.0: An XML Pipeline Language</citetitle>.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</emphasis></para>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C.</para>
</legalnotice>
</info>

<section xml:id="introduction">
  <title>Introduction</title>

<para>This specification describes the standard, required atomic XProc
steps. A machine-readable description of these steps may be found in
<link xlink:href="steps.xpl">steps.xpl</link>.
</para>

<para>Many atomic steps are available for <biblioref linkend="xproc30"/>. They are described in several specifications.
This specification describes the general background common to all
steps. A conformant processor <rfc2119>must</rfc2119> implement all of
the steps in this specification. Additional steps may also be
implemented.
</para>

<para>The types given for options should be understood as follows:</para>
<itemizedlist>
  <listitem>
    <para>Types in the XML Schema namespace, identified as QNames with the
    <code>xs:</code> prefix, as per the XML Schema specification with one
    exception. Anywhere an <code>xs:QName</code> is specified,
    an
    <link xlink:href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</link>
    is allowed.</para>
  </listitem>
  <listitem>
    <para><type>XPathExpression</type>:
    As a string per <biblioref linkend="xmlschema-2"/>, including
    whitespace normalization, and the further requirement to be a
    conformant Expression per <biblioref linkend="xpath31"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>XSLTSelectionPattern</type>: An XSLT pattern.
    </para>
  </listitem>
  <listitem>
    <para><type>XPathSequenceType</type>: An XPath
    <link xlink:href="https://www.w3.org/TR/xpath-31/#id-types">sequence type</link>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentType</type>: A media type as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
  <listitem>
    <para><type>ContentTypes</type>:
    As a whitespace separated list of media types as defined in
    <biblioref linkend="rfc2046"/>.
    </para>
  </listitem>
</itemizedlist>

<para>Option values are often expressed using the shortcut syntax. In
these cases, the option shortcuts are generally treated as value
templates. However, for options of type <code>map()</code> or
<code>array()</code>, an expression is <emphasis>required</emphasis>
(there is no non-expression string which can ever be a legal value for
a map or array). Given that every value entered this way will have to
be a value template, and consequently every curly brace contained
within the expression will have to be escaped, values of type map or
array are defined to be expressions directly.</para>

<para>Some aspects of documents are generally unchanged by steps:</para>

<itemizedlist>
<listitem>
<para>When a step in this library produces an output document,
the base URI of the output is the base URI of the step's primary
input document unless the step's process explicitly sets an
<tag class="attribute">xml:base</tag> attribute or the step's
description explicitly states how the base URI is constructed.</para>
</listitem>
<listitem>
<para>Each step describes how it modifies the document properties of
the documents that flow through it.</para>
<para>A great many steps indicate that they preserve some or all of
the properties of the input document. It should be noted that in some
cases the transformation performed by the step will violate the
condition associated with some property. In general, the steps cannot
know this and the pipeline author is responsible for managing the
properties with greater care in this case.
</para>
</listitem>
</itemizedlist>

<para xml:id="cv.result">Also, in this specification, several steps use this
element for result information:</para>

<e:rng-pattern name="VocabResult"/>

<para>When a step uses an XPath to compute an option value, the XPath
context is as defined in <biblioref linkend="xproc30"/>.</para>

<para>When a step specifies a particular version of a technology,
implementations <rfc2119>must</rfc2119> implement that
version or a subsequent version that is backwards compatible with that
version. At user-option, they may implement other non-backwards
compatible versions.</para>
  
<para>In this specification the words <rfc2119>must</rfc2119>, <rfc2119>must not</rfc2119>,
        <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>, <rfc2119>may</rfc2119> and
        <rfc2119>recommended</rfc2119> are to be interpreted as described in <biblioref linkend="rfc2119"/>.</para>

</section>

<section xml:id="req-steps">
<title>The required steps</title>

<para>A conformant processor must support all of these steps.</para>

<section xml:id="c.add-attribute">
<title>p:add-attribute</title>

<para>The <code>p:add-attribute</code> step adds a single attribute to
a set of matching elements. The input document specified on the
<code>source</code> is processed for matches specified by the match
pattern in the <option>match</option> option. For each of these
matches, the attribute whose name is specified by the
<option>attribute-name</option> option is set to the attribute value
specified by the <option>attribute-value</option> option.
</para>

<para>The resulting document is produced on the <code>result</code>
output port and consists of a exact copy of the input with the
exception of the matched elements. Each of the matched elements is
copied to the output with the addition of the specified attribute
with the specified value.
</para>

<p:declare-step type="p:add-attribute">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
  <p:option name="attribute-name" required="true" as="xs:QName"/>
  <p:option name="attribute-value" required="true" as="xs:string"/>
</p:declare-step>

<para>The value of the <option>match</option> option
<rfc2119>must</rfc2119> be an XSLTSelectionPattern. <error code="C0023">It
is a <glossterm>dynamic error</glossterm> if the match pattern matches a node
which is not an element.</error></para>

<para>The value of the <option>attribute-value</option> option
<rfc2119>must</rfc2119> be a legal attribute value according to XML.</para>

<para>If an attribute with the same name as the expanded name
from the <option>attribute-name</option> option exists on the matched
element, the value specified in
the <option>attribute-value</option> option is used to set the
value of that existing attribute.  That is, the value of the
existing attribute is changed to the <option>attribute-value</option>
value. </para>

<note xml:id="note-multattr"><para>If multiple attributes need to be set on the same
element(s), the <tag>p:set-attributes</tag> step can be used to set them
all at once.</para>
</note>

<para>This step cannot be used to add namespace declarations. <error code="C0059">It is a <glossterm>dynamic error</glossterm> if the QName
value in the <option>attribute-name</option> option uses the prefix
“<literal>xmlns</literal>”
or any other prefix that resolves to the namespace name
<uri>http://www.w3.org/2000/xmlns/</uri>.
</error> Note, however, that while namespace declarations cannot be
added explicitly by this step, adding an attribute whose name is in a
namespace for which there is no namespace declaration in scope on the
matched element may result in a namespace binding being added by
namespace fixup.</para>

<para>If an attribute named
<tag class="attribute">xml:base</tag> is added or changed, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<simplesect>
<title>Document properties</title>
<para feature="add-attribute-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.add-xml-base">

<title>p:add-xml-base</title>

<para>The <code>p:add-xml-base</code> step exposes the base URI via
explicit <code>xml:base</code> attributes. The input document from the
<port>source</port> port is replicated to the <port>result</port> port
with <code>xml:base</code> attributes added to or corrected on each element as specified
by the options on this step.</para>

<p:declare-step type="p:add-xml-base">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="all" as="xs:boolean" select="false()"/>
   <p:option name="relative" as="xs:boolean" select="true()"/>
</p:declare-step>

 <para>The value of the <option>all</option> option
<rfc2119>must</rfc2119> be a boolean.</para>

 <para>The value of the <option>relative</option> option
<rfc2119>must</rfc2119> be a boolean.</para>

<para><error code="C0058">It is a <glossterm>dynamic error</glossterm>
if the <option>all</option> and <option>relative</option> options are
<emphasis>both</emphasis> <literal>true</literal>.</error></para>

<para>The <tag>p:add-xml-base</tag> step modifies its input as follows:</para>

<itemizedlist>
<listitem>
<para>For the document element: force the element to have an <tag class="attribute">xml:base</tag>
attribute with the document's [base URI] property's value as its value.</para>
</listitem>
<listitem>
<para>For other elements:</para>
<itemizedlist>
<listitem>
<para>If the <option>all</option> option has the value
<literal>true</literal>, force the element to have an <tag class="attribute">xml:base</tag> attribute with the element's [base
URI] value as its value.</para>
</listitem>
<listitem>
<para>If the element's [base URI] is different from the its parent's
[base URI], force the element to have an <tag class="attribute">xml:base</tag> attribute with the following
value: if the value of the <option>relative</option> option is
<literal>true</literal>, a string which, when resolved against the
parent's [base URI], will give the element's [base URI], otherwise the
element's [base URI].</para>
</listitem>
<listitem>
<para>Otherwise, if there is an <tag class="attribute">xml:base</tag> attribute present, remove it.
</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>

<simplesect>
<title>Document properties</title>
<para feature="add-xml-base-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.cast-content-type">
<title>p:cast-content-type</title>

<para>The <tag>p:cast-content-type</tag> step changes the media type
of its input.</para>

<p:declare-step type="p:cast-content-type">
   <p:input port="source" content-types="*/*"/>
   <p:output port="result" content-types="*/*"/>
   <p:option name="content-type" required="true" as="xs:string"/>
   <p:option name="parameters" as="map(xs:QName,item()*)?"/>
</p:declare-step>

<para>The input document is transformed from one media type to another.
<error code="C0070">It is a <glossterm>dynamic
error</glossterm> if the supplied <option>content-type</option> is not
a valid media type of the form
“<literal><replaceable>type</replaceable>/<replaceable>subtype</replaceable>+<replaceable>ext</replaceable></literal>”.</error>
<error code="C0071">It is a <glossterm>dynamic
error</glossterm> if the <tag>p:cast-content-type</tag> step
cannot perform the requested cast.</error>
</para>

<para>The <option>parameters</option> can be used to supply parameters to
control casting. <impl>The semantics of the keys and the allowed values for
these keys are <glossterm>implementation-defined</glossterm>.</impl>
<error code="C0079">It is a <glossterm>dynamic error</glossterm> if the map
<option>parameters</option> contains an entry whose key is defined by the
implementation and whose value is not valid for that key.</error></para>

<itemizedlist>
<listitem>
<para>Casting from one XML media type to another simply changes the
“<literal>content-type</literal>” document property.
</para>
</listitem>

<listitem>
<para>Casting from an HTML media type to an XML media type, if the input
document is already an XPath data model document, simply changes the
“<literal>content-type</literal>” document property.
<impl>Casting an HTML document that isn’t already an XPath data
model document into XML is
<glossterm>implementation-defined</glossterm>.</impl>
</para>
</listitem>

<listitem>
<para>Casting from an XML media type to an HTML media type, simply changes the
“<literal>content-type</literal>” document property.
</para>
</listitem>

<listitem>
<para>Casting from a JSON media type to an XML media type, converts the
JSON into XML. <impl>The precise nature of the conversion from JSON to XML
is <glossterm>implementation-defined</glossterm>.</impl>
If the input document is a text node or other string representation,
implementations <rfc2119>should</rfc2119> use <function>fn:json-to-xml</function>
by default.
</para>
</listitem>

<listitem>
<para>Casting from an XML media type to a JSON media type, converts the
XML into JSON. <impl>The precise nature of the conversion from XML to JSON
is <glossterm>implementation-defined</glossterm>.</impl>
If the input document is an XML representation of JSON as defined in
<biblioref linkend="xpath31-functions"/>,
implementations <rfc2119>must</rfc2119> use <function>fn:xml-to-json</function>
by default. If the input document has a <tag>c:param-set</tag> document element,
a map <rfc2119>must</rfc2119> be returned that represents the document's 
<tag>c:param</tag> elements.
</para>
</listitem>

<listitem xml:id="c.data">
<para>Casting from a non-XML media type to an XML media type produces an
XML document with a <tag>c:data</tag> document element. The original
media type will be preserved in the
<tag class="attribute">content-type</tag> attribute on the
<tag>c:data</tag> element.</para>

<e:rng-pattern name="VocabData"/>

<para>The content of the <tag>c:data</tag> element is the base64 encoded
representation of the non-XML content.</para>
</listitem>

<listitem>
<para>Casting from an XML media type to a non-XML media type
<rfc2119>must</rfc2119> support the case where the input document is
a <tag>c:data</tag> document. The resulting document will
have the specified media type and a representation that
is the content of the <tag>c:data</tag> element after decoding the base64
encoded content.</para>
<para><error code="C0072">It is a <glossterm>dynamic
error</glossterm> if the <tag>c:data</tag> contains content is not
a valid base64 string.</error></para>
<para><error code="C0073">It is a <glossterm>dynamic
error</glossterm> if the <tag>c:data</tag> element does not have
a <tag class="attribute">content-type</tag> attribute.</error></para>
<para><error code="C0074">It is a <glossterm>dynamic
error</glossterm> if the <option>content-type</option> is supplied and is
not the same as the <tag class="attribute">content-type</tag> specified on
the <tag>c:data</tag> element.</error>
</para>
<para><impl>Casting from an XML media type to a non-XML media type when
the input document is not a <tag>c:data</tag> document is
<glossterm>implementation-defined</glossterm>.</impl></para>
</listitem>
<listitem>
<para><impl>Casting from one non-XML media type to another
non-XML media type is <glossterm>implementation-defined</glossterm>.</impl>
</para>
</listitem>
</itemizedlist>

<para><error code="C075">In all cases except when the input document
is a <tag>c:data</tag> element, it is a <glossterm>dynamic
error</glossterm> if the <option>content-type</option> is not supplied.</error>
</para>

<simplesect>
<title>Document properties</title>
<para feature="cast-content-type-preserves-some">All document
properties are preserved except the <code>content-type</code> property
which is updated accordingly.</para>
</simplesect>
</section>
<section xml:id="c.compare">
<title>p:compare</title>

<para>The <code>p:compare</code> step compares two documents for
equality.</para>

<p:declare-step type="p:compare">
   <p:input port="source" primary="true" content-types="*/*"/>
   <p:input port="alternate" content-types="*/*"/>
   <p:output port="result" content-types="application/xml"/>
   <p:output port="differences" content-types="*/*" sequence="true"/>
   <p:option name="parameters" as="map(xs:QName,item()*)?"/>
   <p:option name="method" as="xs:QName?"/>
   <p:option name="fail-if-not-equal" as="xs:boolean" select="false()"/>
</p:declare-step>

<para>This step takes single documents on each of two ports and
compares them. If <option>method</option> is not specified, or if
<code>deep-equal</code> is specified, the comparison
uses <function>fn:deep-equal</function>
(as defined in <biblioref linkend="xpath31-functions"/>). <impl>Implementations of <tag>p:compare</tag>
<rfc2119>must</rfc2119> support the <code>deep-equal</code> <option>method</option>;
other supported methods are <glossterm>implementation-defined</glossterm>.</impl>
<error code="C0076">It is a <glossterm>dynamic error</glossterm> if
the comparison <option>method</option> specified in <tag>p:compare</tag>
is not supported by the implementation.</error>
<error code="C0077">It is a <glossterm>dynamic error</glossterm> if
the media types of the documents supplied are incompatible with the
comparison <option>method</option>.</error>
</para>

<para><error code="C0019">It is a <glossterm>dynamic error</glossterm>
if the documents are not equal according to the specified comparison
<option>method</option>, and the value of the
<option>fail-if-not-equal</option> option is
<literal>true</literal>.</error> If the documents are equal, or if the
value of the <option>fail-if-not-equal</option> option is
<literal>false</literal>, a <tag>c:result</tag> document is produced
with contents <literal>true</literal> if the documents are equal,
otherwise <literal>false</literal>.</para>

<para><impl>If
<option>fail-if-not-equal</option> is <code>false</code>, and the
documents differ, an <glossterm>implementation-defined</glossterm>
summary of the differences between the two documents may appear on the
<port>differences</port> port.</impl></para>

<simplesect>
<title>Document properties</title>
<para feature="compare-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.count">
<title>p:count</title>

<para feature="p-count">The <code>p:count</code> step counts the number of documents in
the <code>source</code> input sequence and returns a single document
on <code>result</code> containing that number. The generated document
contains a single <tag>c:result</tag> element whose contents is the
string representation of the number of documents in the
sequence.</para>

<p:declare-step type="p:count">
   <p:input port="source" content-types="*/*" sequence="true"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="limit" as="xs:integer" select="0"/>
</p:declare-step>

<para>If the <tag feature="p-count-limit" class="attribute">limit</tag> option is specified
and is greater than zero, the <tag>p:count</tag> step will count at most
that many documents. This provides a convenient mechanism to discover,
for example, if a sequence consists of more than 1 document, without
requiring every single document to be buffered before processing can
continue.</para>

<simplesect>
<title>Document properties</title>
<para feature="count-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.delete">
<title>p:delete</title>

<para>The <code>p:delete</code> step deletes items specified by a match
pattern from the
<code>source</code> input document and produces the resulting document,
with the deleted items removed, on the <port>result</port> port.</para>

<p:declare-step type="p:delete">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
</p:declare-step>

<para>The value of the <option>match</option> option <rfc2119>must</rfc2119> be an
XSLTSelectionPattern. A match pattern may match multiple items to be
deleted.</para>

<para>If an element is selected by the <option>match</option> option, the
entire subtree rooted at that element is deleted.</para>

<para>This step cannot be used to remove namespaces. <error code="C0062">It is a <glossterm>dynamic error</glossterm> if the
<option>match</option> option matches a namespace node.</error>
Also, note that deleting an attribute named
<tag class="attribute">xml:base</tag> does not change the base URI
of the element on which it occurred.</para>

<simplesect>
<title>Document properties</title>
<para feature="delete-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.directory-list">
<title>p:directory-list</title>

  <para>The <code>p:directory-list</code> step produces a list of the contents
    of a specified directory.</para>

<p:declare-step type="p:directory-list">
  <p:output port="result" content-type="application/xml"/>
  <p:option name="path" required="true" as="xs:anyURI"/>
  <p:option name="detailed" as="xs:boolean" select="false()"/>
  <p:option name="include-filter" as="xs:string*" e:type="RegularExpression"/>
  <p:option name="exclude-filter" as="xs:string*" e:type="RegularExpression"/>
</p:declare-step>

<para><impl>Conformant processors <rfc2119>must</rfc2119> support directory paths whose
scheme is <code>file</code>. It is
<glossterm>implementation-defined</glossterm> what other schemes are
supported by <tag>p:directory-list</tag>, and what the interpretation
of 'directory', 'file' and 'contents' is for those schemes.</impl>
</para>

<para><error code="C0017">It is a
<glossterm>dynamic error</glossterm> if the absolute path does not
identify a directory.</error> <error code="C0012">It is a
<glossterm>dynamic error</glossterm> if the contents of the directory
path are not available to the step due to access restrictions in the
environment in which the pipeline is run.</error></para>

<para>If the <option>detailed</option> option is true, the pipeline
author is requesting additional information about the matching entries,
see <xref linkend="dir-list-details"/>.</para>

<para>If present, the value of the <option>include-filter</option>
or <option>exclude-filter</option>
option <rfc2119>must</rfc2119> be a list of regular expression as specified in
<biblioref linkend="xpath31-functions"/>, section 7.61 “<literal>Regular Expression
Syntax</literal>”.</para>

<para>If any <option>include-filter</option> pattern matches a
directory entry's name, the entry is included in the output. If any
<option>exclude-filter</option> pattern matches a directory entry's
name, the entry is excluded in the output. If both options are
provided, the include filter is processed first, then the exclude
filter. As a result: an item is included if it matches (at least) one
of the <option>include-filter</option> values and none of the
<option>exclude-filter</option> values.</para>

<note>
<para>There is no way to specify a list of values using attribute value
templates. If the option shortcut syntax is used to provide the
<option>include-filter</option> or <option>exclude-filter</option> option,
it will consist of a single regular expression. To specify a list of
regular expressions, you must use the  <tag>p:with-option</tag>
syntax.
</para>
</note>

<para xml:id="cv.directory">The result document produced for
the specified directory path has a <tag>c:directory</tag> document
element whose base URI is the directory path and whose
<tag class="attribute">name</tag> attribute is the last segment
of the directory path (that is, the directory's (local) name).</para>

<e:rng-pattern name="VocabDirectory"/>

<para>Its contents are determined as follows, based on the entries in
the directory identified by the directory path. For each entry in the
directory, if either no <option>filter</option> was specified, or the
(local) name of the entry matches the filter pattern, a
<tag>c:file</tag>, a <tag>c:directory</tag>, or a <tag>c:other</tag>
element is produced, as follows:
</para>

<itemizedlist>
<listitem>
<para>A <tag>c:directory</tag> is produced for each subdirectory not
determined to be special.</para>
</listitem>
<listitem>
<para xml:id="cv.file">A <tag>c:file</tag> is produced for each file
not determined to be special.</para>
<e:rng-pattern name="VocabFile"/>
</listitem>
<listitem>
<para xml:id="cv.other"><impl>Any file or directory determined to be
special by the <tag>p:directory-list</tag> step may be output using a
<tag>c:other</tag> element but the criteria for marking a file as
special are <glossterm>implementation-defined</glossterm>.</impl>
</para>
<e:rng-pattern name="VocabOther"/>
</listitem>
</itemizedlist>

<para>When a directory entry is a subdirectory, that directory's entries are not
output as part of that entry's <tag>c:directory</tag>.  A user must apply this step
again to the subdirectory to list subdirectory contents.</para>

<para>Each of the elements <tag>c:file</tag>, <tag>c:directory</tag>,
and <tag>c:other</tag> has a <code>name</code> attribute when it
appears within the top-level <tag>c:directory</tag> element, whose
value is a relative IRI reference, giving the (local) file or
directory name.</para>

<section xml:id="dir-list-details">
<title>Directory list details</title>

<para>If <option>detailed</option> is false, then only the
<tag class="attribute">name</tag> attribute is expected on
<tag>c:file</tag>, <tag>c:directory</tag>, or <tag>c:other</tag>
elements.
<impl>Any other attributes on
<tag>c:file</tag>, <tag>c:directory</tag>, or <tag>c:other</tag>
are <glossterm>implementation-defined</glossterm>.</impl></para>

<para>If <option>detailed</option> is true, then the pipeline author
is expecting additional details about each entry. The following attributes
<rfc2119>should</rfc2119> be provided by the implementation:</para>

<variablelist>
<varlistentry><term><tag class="attribute">readable</tag></term>
<listitem><para>“<code>true</code>” if the entry is readable.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">writable</tag></term>
<listitem><para>“<code>true</code>” if the entry is writable.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">hidden</tag></term>
<listitem><para>“<code>true</code>” if the entry is hidden.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">last-modified</tag></term>
<listitem><para>The last modification time of the entry, expressed as a lexical
<code>xs:dateTime</code> in UTC.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">size</tag></term>
<listitem><para>The size of the entry in bytes.</para>
</listitem>
</varlistentry>
</variablelist>

<para><impl>The precise meaning of these properties are
<glossterm>implementation-defined</glossterm> and may vary according
to the URI scheme of the <option>path</option>.</impl>
If the value of an attribute is “<code>false</code>” or if it has no
meaningful value, the attribute may be omitted.</para>

<para><impl>Any other attributes on
<tag>c:file</tag>, <tag>c:directory</tag>, or <tag>c:other</tag>
are <glossterm>implementation-defined</glossterm>.</impl></para>
</section>

<simplesect>
<title>Document properties</title>
<para feature="directory-list-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.error">
<title>p:error</title>

<para>The <code>p:error</code> step generates a <glossterm role="unwrapped">dynamic error</glossterm> using the input provided
to the step.</para>

<p:declare-step type="p:error">
    <p:input port="source" sequence="true" content-types="application/xml text/xml */*+xml text/*"/>
    <p:output port="result" sequence="true" content-types="application/xml text/xml */*+xml text/*"/>
    <p:option name="code" required="true" as="xs:QName"/>
</p:declare-step>

<para>This step uses the document provided on its input as the content
of the error raised. An instance of the
<tag>c:errors</tag> element will be produced on the error output port, as is
always the case for <glossterm baseform="dynamic error" role="unwrapped">dynamic errors</glossterm>.
The error generated can be caught by a <tag>p:try</tag> just like any
other dynamic error.</para>

<para>For authoring convenience, the <tag>p:error</tag> step is
declared with a single, primary output port. With respect to connections,
this port behaves like
any other output port even though nothing can ever
appear on it since the step always fails.</para>

<para>For example, given the following invocation:</para>
<programlisting language="xml">&lt;p:error xmlns:my="http://www.example.org/error"
         name="bad-document" code="my:unk12"&gt;
   &lt;p:input port="source"&gt;
     &lt;p:inline&gt;
       &lt;message&gt;The document element is unknown.&lt;/message&gt;
     &lt;/p:inline&gt;
   &lt;/p:input&gt;
&lt;/p:error&gt;</programlisting>

<para>The error vocabulary element (and document) generated on the
error output port would be:</para>
<programlisting language="xml">&lt;c:errors xmlns:c="http://www.w3.org/ns/xproc-step"
          xmlns:p="http://www.w3.org/ns/xproc"
          xmlns:my="http://www.example.org/error"&gt;
 &lt;c:error name="bad-document" type="p:error"
          code="my:unk12"&gt;&lt;message&gt;The document element is unknown.&lt;/message&gt;
&lt;/c:error&gt;
&lt;/c:errors&gt;</programlisting>

<para>The <tag class="attribute">href</tag>,
<tag class="attribute">line</tag> and <tag class="attribute">column</tag>,
or <tag class="attribute">offset</tag>, might also be present on the
<tag>c:error</tag> to identify the location of the <tag>p:error</tag>
element in the pipeline.</para>

<simplesect>
<title>Document properties</title>
<para feature="error-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.escape-markup">
<title>p:escape-markup</title>

<para>The <code>p:escape-markup</code> step applies XML serialization to the
children of the document element and replaces those children with their
serialization. The outcome is a single element with text content that
represents the "escaped" syntax of the children as they were
serialized.</para>

<p:declare-step type="p:escape-markup">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="serialization" as="map(xs:string,xs:anyAtomicType)?"/>
</p:declare-step>

<para>This step supports the standard serialization options as
specified in <link linkend="xml-serialization"/>. These options
control how the output markup is produced before it is escaped.
</para>

<para>For example, the input:</para>
<programlisting language="xml">&lt;description&gt;
&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;p&gt;This is a chunk of XHTML.&lt;/p&gt;
&lt;/div&gt;
&lt;/description&gt;</programlisting>
<para>produces:</para>
<programlisting language="xml">&lt;description&gt;
&amp;lt;div xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;p&gt;This is a chunk of XHTML.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/description&gt;</programlisting>

<note xml:id="note-escaped">
<para>The result of this step is an XML document that contains the
Unicode characters that are the characters that result from escaping
the input. It is not encoded characters in a serialized octet stream,
therefore, the serialization options related to encoding characters
(<option>byte-order-mark</option>, <option>encoding</option>, and
<option>normalization-form</option>) do not apply. They are omitted
from the standard serialization options on this step.</para>
</note>

<para>By default, this step <rfc2119>must not</rfc2119> generate an
XML declaration in the escaped result.</para>

<simplesect>
<title>Document properties</title>
<para feature="escape-markup-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.file-copy">
  <title>p:file-copy</title>

  <para>The <code>p:file-copy</code> step copies a file.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check the error codes. Were borrowed from p:load and p:store.</para>
  </note>

  <p:declare-step type="p:file-copy">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="target" required="true" as="xs:anyURI"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-copy</tag> step copies the file or directory named in <option>href</option> to the new name specified in
      <option>target</option>. If the target is a directory, the step attempts to move the file into that directory,
    preserving its base name.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> or
        <option>target</option> option value is not a valid <type>xs:anyURI</type>.</error> If the <option>href</option>
    or <option>target</option> is relative, it is made absolute against the base URI of the element on which it is
    specified (<tag>p:with-option</tag> or <tag>p:file-copy</tag> in the case of a syntactic shortcut value).</para>

  <para>If the copy is successful, the step returns a <tag>c:result</tag> element containing the absolute URI of the
    target.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file or directory.</error></para>
    </listitem>
    <listitem>
      <para><error code="C0050">It is a <glossterm>dynamic error</glossterm> if the URI scheme of the
            <option>target</option> option is not supported or the file or directory cannot be copied to the specified
          location.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>
  
</section>
<section xml:id="c.file-delete">
  <title>p:file-delete</title>

  <para>The <code>p:file-delete</code> step deletes a file or a directory.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
  </note>

  <p:declare-step type="p:file-delete">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="recursive" as="xs:boolean" select="false()"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-delete</tag> step attempts to delete the file or directory named in
    <option>href</option>.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-delete</tag>
    in the case of a syntactic shortcut value).</para>

  <para>If <option>href</option> specifies a directory, it can only be deleted if the <option>recursive</option> option
    is <code>true</code> or if the specified directory is empty.</para>

  <para>If the delete is successful, the step returns a <tag>c:result</tag> element containing the absolute URI of the
    deleted file or directory.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file or directory.</error></para>
    </listitem>
    <listitem>
      <para><error code="XXXXX">It is a <glossterm>dynamic error</glossterm> if an attempt is made to delete a non-empty
      directory and the <option>recursive</option> option was set to <code>false</code>.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-head">
  <title>p:file-head</title>

  <para>The <code>p:file-head</code> step returns lines from the beginning of a text file.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
    <para>Norm, offline at the moment, asks: why does this step return XML instead of text?</para>
  </note>

  <p:declare-step type="p:file-head">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="count" required="true" as="xs:integer"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-head</tag> step returns lines of the file named in the <option>href</option> option:</para>
  <itemizedlist>
    <listitem>
      <para>If the <option>count</option> option is positive, the <tag>p:file-head</tag> step returns the first
          <option>count</option> lines</para>
    </listitem>
    <listitem>
      <para>If the <option>count</option> option is zero, the <tag>p:file-head</tag> step returns all lines</para>
    </listitem>
    <listitem>
      <para>If the <option>count</option> option is negative, the <tag>p:file-head</tag> step returns all lines except
        the first <option>count</option> lines</para>
    </listitem>
  </itemizedlist>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-head</tag> in
    the case of a syntactic shortcut value).</para>

  <para>The step returns a <tag>c:result</tag> element containing one <tag>c:line</tag> child element for each line.
    Lines are identified as described in <link xlink:href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
      End-of-Line Handling</link></para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file.</error></para>
    </listitem>
    <listitem>
      <para><error code="XXXXX">It is a <glossterm>dynamic error</glossterm> if the file named in the
            <option>href</option> option does not appear to be a text file. The exact conditions that constitute “does
          not appear to be” are implementation-defined.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-info">
  <title>p:file-info</title>

  <para>The <code>p:file-info</code> step returns information about a file, directory or other file system
    object.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
  </note>

  <p:declare-step type="p:file-info">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-info</tag> step returns information about the file, directory or other file system object named
    in the <option>href</option> option.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-info</tag> in
    the case of a syntactic shortcut value).</para>

  <para>If the <option>href</option> option is not a <code>file:</code> URI, the result is implementation
    defined.</para>

  <para>If the <option>href</option> option is a <code>file:</code> URI, the step returns:</para>
  <itemizedlist>
    <listitem>
      <para>If <option>href</option> option references a file: A <tag>c:file</tag> element with standard attributes (see
        below).</para>
    </listitem>
    <listitem>
      <para>If <option>href</option> option references a directory: A <tag>c:directory</tag> element with standard
        attributes (see below).</para>
    </listitem>
    <listitem>
      <para>If <option>href</option> option references any other file system object: Implementation defined (for example
        an <tag>c:other</tag> or <tag>c:device</tag> element). It is advised to use the standard attributes (see below)
        if applicable.</para>
    </listitem>
  </itemizedlist>

  <para>The following attributes are standard on a returned <tag>c:file</tag> or <tag>c:directory</tag> element. All
    attributes are optional and must be absent if not applicable. Additional implementation-defined attributes may be
    present, but they must be in a namespace.</para>
  <informaltable>
    <tgroup cols="3">
      <thead>
        <row>
          <entry>Attribute</entry>
          <entry>Type</entry>
          <entry>Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><tag class="attribute">readable</tag></entry>
          <entry><type>xs:boolean</type></entry>
          <entry><literal>true</literal> if the object is readable.</entry>
        </row>
        <row>
          <entry><tag class="attribute">writable</tag></entry>
          <entry><type>xs:boolean</type></entry>
          <entry><literal>true</literal> if the object file is writable.</entry>
        </row>
        <row>
          <entry><tag class="attribute">hidden</tag></entry>
          <entry><type>xs:boolean</type></entry>
          <entry><literal>true</literal> if the object is hidden.</entry>
        </row>
        <row>
          <entry><tag class="attribute">last-modified</tag></entry>
          <entry><type>xs:dateTime</type></entry>
          <entry>The last modification time of the object expressed in UTC.</entry>
        </row>
        <row>
          <entry><tag class="attribute">size</tag></entry>
          <entry><type>xs:integer</type></entry>
          <entry>The size of the object in bytes.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file, directory or other file
          system object.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-mkdir">
  <title>p:file-mkdir</title>

  <para>The <code>p:file-mkdir</code> step creates a directory.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
  </note>

  <p:declare-step type="p:file-mkdir">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-mkdir</tag> create the directory named in the <option>href</option> option. If this includes
    more than one directory component, all of the intermediate components are created. The path separator is
    implementation-defined.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-mkdir</tag> in
    the case of a syntactic shortcut value).</para>

  <para>If the create is successful, the step returns a <tag>c:result</tag> element containing the absolute URI of the
    directory created.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="XXXX">It is a <glossterm>dynamic error</glossterm> if the directory referenced by the
            <option>href</option> option cannot be created.</error></para>
    </listitem>
  </itemizedlist>

  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-move">
  <title>p:file-move</title>

  <para>The <code>p:file-move</code> step moves a file or directory.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check the error codes. Were borrowed from p:load and p:store.</para>
  </note>

  <p:declare-step type="p:file-move">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="target" required="true" as="xs:anyURI"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-move</tag> step moves the file or directory named in <option>href</option> to the new location
    specified in <option>target</option>. If the <option>target</option> option specifies an
      <emphasis>existing</emphasis> directory, the step attempts to move the file or directory <emphasis>into</emphasis>
    that directory, preserving its base name.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> or
        <option>target</option> option value is not a valid <type>xs:anyURI</type>.</error> If the <option>href</option>
    or <option>target</option> is relative, it is made absolute against the base URI of the element on which it is
    specified (<tag>p:with-option</tag> or <tag>p:file-move</tag> in the case of a syntactic shortcut value).</para>

  <para>If the <option>href</option> option specifies a device or other special kind of object, the results are
    implementation-defined.</para>

  <para>If the move is successful, the step returns a <tag>c:result</tag> element containing the absolute URI of the
    target.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file or
        directory.</error></para>
    </listitem>
    <listitem>
      <para><error code="XXXXX">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
        <option>target</option> option is an existing file or other file system object.</error></para>
    </listitem>
    <listitem>
      <para><error code="C0050">It is a <glossterm>dynamic error</glossterm> if the URI scheme of the
            <option>target</option> option is not supported or the file or directory cannot be moved to the specified
          location.</error></para>
    </listitem>
  </itemizedlist>

  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-tail">
  <title>p:file-tail</title>

  <para>The <code>p:file-tail</code> step returns lines from the end of a text file.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
  </note>

  <p:declare-step type="p:file-tail">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="count" required="true" as="xs:integer"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-tail</tag> step returns lines of the file named in the <option>href</option> option:</para>
  <itemizedlist>
    <listitem>
      <para>If the <option>count</option> option is positive, the <tag>p:file-tail</tag> step returns the last
          <option>count</option> lines</para>
    </listitem>
    <listitem>
      <para>If the <option>count</option> option is zero, the <tag>p:file-tail</tag> step returns all lines</para>
    </listitem>
    <listitem>
      <para>If the <option>count</option> option is negative, the <tag>p:file-tail</tag> step returns all lines except
        the last <option>count</option> lines</para>
    </listitem>
  </itemizedlist>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-tail</tag> in
    the case of a syntactic shortcut value).</para>

  <para>The step returns a <tag>c:result</tag> element containing one <tag>c:line</tag> child element for each line.
    Lines are identified as described in <link xlink:href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
      End-of-Line Handling</link></para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file.</error></para>
    </listitem>
    <listitem>
      <para><error code="XXXXX">It is a <glossterm>dynamic error</glossterm> if the file named in the
            <option>href</option> option does not appear to be a text file. The exact conditions that constitute “does
          not appear to be” are implementation-defined.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-tempfile">
  <title>p:file-tempfile</title>

  <para>The <code>p:file-tempfile</code> step creates a temporary file.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check the error codes. ANd is the name ok? <tag>p:file-create-tempfile</tag> sounds better to me?</para>
    <para>I added the option to leave out the <option>href</option> option and have the tempfile created in the system's
      temp directory. Ok?</para>
  </note>

  <p:declare-step type="p:file-tempfile">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" as="xs:anyURI?"/>
    <p:option name="suffix" as="xs:string?"/>
    <p:option name="prefix" as="xs:string?"/>
    <p:option name="delete-on-exit" as="xs:boolean" select="false()"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-tempfile</tag> creates a temporary file. The temporary file is guaranteed not to already exist
    when the step is called.</para>

  <para>If the <option>href</option> option is specified it must be the URI of an existing directory. The temporary file
    is created here. If there is no <option>href</option> option specified the location of the temporary file is
    implementation defined, usually the operating system's default location for temporary files.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> is relative, it is made absolute against
    the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-tempfile</tag> in the
    case of a syntactic shortcut value).</para>

  <para>If the <option>prefix</option> option is specified, the filename will begin with that prefix. If the
      <option>suffix</option> option is specified, the filename will end with that suffix.</para>

  <para>If the <option>delete-on-exit</option> option is <code>true</code>, an attempt will be made to automatically
    delete the temporary file when the processor terminates the pipeline. No error will be raised if this is
    unsuccessful.</para>

  <para>If the temporary file creation is successful, the step returns a <tag>c:result</tag> element containing the
    absolute URI of this file.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a directory.</error></para>
    </listitem>
    <listitem>
      <para><error code="XXXXX">It is a <glossterm>dynamic error</glossterm> if the temporary file could not be
          created.</error></para>
    </listitem>
  </itemizedlist>

  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.file-touch">
  <title>p:file-touch</title>

  <para>The <code>p:file-touch</code> step updates the modification timestamp of a file.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
    <para>Check and amend the error codes.</para>
  </note>

  <p:declare-step type="p:file-touch">
    <p:output port="result" primary="true" content-types="application/xml"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="timestamp" as="xs:dateTime?"/>
    <p:option name="fail-on-error" as="xs:boolean" select="true()"/>
  </p:declare-step>

  <para>The <tag>p:file-touch</tag> step updates the modification timestamp of the fiel specified in the
    <option>href</option> option.</para>

  <para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if the <option>href</option> option value is
      not a valid <type>xs:anyURI</type>.</error> If the <option>href</option> option is relative, it is made absolute
    against the base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:file-touch</tag> in
    the case of a syntactic shortcut value).</para>

  <para>If the <option>timestamp</option> option is set, the file's timestamp is set to this value. Otherwise the file's
    timestamp is set to the current system's date and time.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>false</code>, the step returns a
      <tag>c:error</tag> element which may contain additional, implementation-defined, information about the nature of
    the error.</para>

  <para>If an error occurs and <option>fail-on-error</option> is <code>true</code>, one of the following errors is
    raised:</para>
  <itemizedlist>
    <listitem>
      <para><error code="D0011">It is a <glossterm>dynamic error</glossterm> if the resource referenced by the
            <option>href</option> option does not exist, cannot be accessed or is not a file.</error></para>
    </listitem>
  </itemizedlist>


  <simplesect>
    <title>Document properties</title>
    <para feature="load-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.filter">
<title>p:filter</title>

<para>The <code>p:filter</code> step selects portions of the source document
based on a (possibly dynamically constructed) XPath select expression.</para>

<p:declare-step type="p:filter">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" sequence="true" content-types="application/xml"/>
  <p:option name="select" required="true" as="xs:string" e:type="XPathExpression"/>
</p:declare-step>

<para>This step behaves just like an <tag>p:input</tag> with
a <tag class="attribute">select</tag> expression except that the select
expression is computed dynamically.</para>

<simplesect>
<title>Document properties</title>
<para feature="filter-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.hash">
<title>p:hash</title>

<para>The <tag>p:hash</tag> step generates a hash, or digital “fingerprint”,
for some value and injects it into the <port>source</port> document.</para>

<p:declare-step type="p:hash">
  <p:input port="source" primary="true" content-types="*/*"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="parameters" as="map(xs:QName,item()*)?"/>
  <p:option name="value" required="true" as="xs:string"/>
  <p:option name="algorithm" required="true" as="xs:QName"/>
  <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
  <p:option name="version" as="xs:string?"/>
</p:declare-step>

<para>The value of the <option>algorithm</option> option must be a QName.
If it does not have a prefix, then it must be one of the following values:
“crc”, “md”, or “sha”.</para>

<para>If a <tag class="attribute">version</tag> is not specified, the
default version is algorithm-defined. For “<literal>crc</literal>” it
is 32, for “<literal>md</literal>” it is 5, for “<literal>sha</literal>”
it is 1.</para>

<para>A hash is constructed from the string specified in the
<option>value</option> option using the specified algorithm and version.
Implementations <rfc2119>must</rfc2119> support
<biblioref linkend="bib.crc"/>,
<biblioref linkend="rfc1321"/>, and <biblioref linkend="bib.sha"/>
hashes. <impl>It is
<glossterm>implementation-defined</glossterm> what other algorithms are
supported.</impl>
The resulting hash <rfc2119>should</rfc2119> be returned as a string of
hexadecimal characters.
</para>

<para>The value of the <option>match</option> option must be an
XSLTSelectionPattern.</para>

<para>The hash of the specified value is computed using the algorithm and
parameters specified. <error code="C0036">It is a
<glossterm>dynamic error</glossterm> if the requested hash algorithm is not
one that the processor understands or if the value or parameters are
not appropriate for that algorithm.</error></para>

<para>The matched nodes are specified with the match pattern in the
<option>match</option> option. For each matching node, the string
value of the computed hash is used in the output (if more than one node
matches, the <emphasis>same</emphasis> hash value is used in each match).
Nodes that do not
match are copied without change.</para>

<para>If the expression given in the <option>match</option> option
matches an <emphasis>attribute</emphasis>, the hash is used as the new
value of the attribute in the output.
If the attribute is named “<tag class="attribute">xml:base</tag>”, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<para>If the expression matches any
other kind of node, the entire node (and <emphasis>not</emphasis> just
its contents) is replaced by the hash.</para>

<simplesect>
<title>Document properties</title>
<para feature="hash-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.http-request">
<title>p:http-request</title>

<para>The <code>p:http-request</code> step provides for interaction
with resources over HTTP or related protocols.
The input
document provided on the <port>source</port> port specifies a request
by a single <tag>c:request</tag> element. This element specifies
the method, resource, and other request properties as well as possibly
including an entity body (content) for the request.</para>

<p:declare-step type="p:http-request">
  <p:input port="source" content-types="*/*"/>
  <p:output port="result" sequence="true" content-types="*/*"/>
  <p:option name="serialization" as="map(xs:string,xs:anyAtomicType)?"/>
</p:declare-step>

<para>The <option>serialization</option> option is provided to control the
serialization of any content which is sent as part of the request.
The effect of these options is as specified in <biblioref linkend="xproc30"/>.
See <link linkend="c.request_body"/> for a discussion of when serialization
occurs in constructing a request.</para>

<para><error code="C0040">It is a <glossterm>dynamic error</glossterm>
if the document element of the document that arrives on the
<port>source</port> port is not <tag>c:request</tag>.</error></para>

<note xml:id="ednote-json" role="editorial">
<title>Editorial Note</title>
<para>Can the input document be JSON?</para>
</note>

<section xml:id="cv.request">
<title>Specifying a request</title>

<para>An HTTP request is represented by a <tag>c:request</tag> element.</para>

<e:rng-pattern name="VocabHttpRequest"/>

<para><error code="C0006">It is a <glossterm>dynamic error</glossterm> if the
<tag class="attribute">method</tag> is not specified on a <tag>c:request</tag>.
</error>
<error code="C0005">It is a <glossterm>dynamic error</glossterm> if the
request contains a <tag>c:body</tag> or <tag>c:multipart</tag> but the
<tag class="attribute">method</tag> does not allow for an entity body being sent with the request.</error></para>

<para><error code="C0004">It is a <glossterm>dynamic error</glossterm> if the
<code>status-only</code> attribute has the value <literal>true</literal> and
the <code>detailed</code> attribute does not have the value <literal>true</literal>.</error></para>

<para>The <code>method</code> attribute specifies the method to be
used against the IRI specified by the <code>href</code> attribute,
e.g. <code>GET</code> or <code>POST</code> (the value is not case-sensitive).
If the <code>href</code>
attribute is not absolute, it will be resolved against the base URI of
the element on which it is occurs.</para>

<note xml:id="note-http-get">
<para>In the case of simple “GET” requests, implementors are encouraged
to support as many protocols as practical. In particular, pipeline authors may
attempt to use <tag>p:http-request</tag> to load documents with computed
URIs using the <literal>file:</literal> scheme.</para></note>

<para>If the <code>username</code> attribute is specified, the
<code>username</code>, <code>password</code>,
<code>auth-method</code>, and <code>send-authorization</code>
attributes are used to handle authentication according to the selected
authentication method.</para>

<para>For the purposes of avoiding an authentication challenge, if the
<code>send-authorization</code> attribute has the value
<literal>true</literal> and the authentication method specified by the
<code>auth-method</code> supports generation of an
<code>Authorization</code> header without a challenge, then an
<code>Authorization</code> header is generated and sent on the first
request. If the <code>send-authorization</code> attribute is absent or
has the value
<literal>false</literal>, then the first request is sent without an
<code>Authorization</code> header.</para>

<para>If the initial response to the request is an
authentication challenge, the <code>auth-method</code>,
<code>username</code>, <code>password</code> and any relevant data from
the challenge are used to generate an
<code>Authorization</code> header and the request is sent again. If
that authorization fails, the request is not retried.</para>

<para>Appropriate values for the <code>auth-method</code> attribute
are “Basic” or “Digest” but other values are allowed.
If the authentication method is “Basic” or “Digest”, authentication
is handled as per <biblioref linkend="rfc2617"/>.
<impl>The
interpretation of <code>auth-method</code> values on
<tag>c:request</tag> other than “Basic” or “Digest” is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para><error code="C0003">It
is a <glossterm>dynamic error</glossterm> if a <option>username</option>
or <option>password</option> is specified without specifying an
<option>auth-method</option>, if
the requested
<option>auth-method</option> isn't supported, or the authentication
challenge contains an authentication method that isn't
supported.</error> All implementations are required to support "Basic"
and "Digest" authentication per <biblioref linkend="rfc2617"/>.</para>

<para>The attribute <code>timeout</code> controls the time the XProc processor is
waiting for the request to be answered. If a value is given for <code>timeout</code>
it is taken as the number of seconds to wait for the response to be delivered.
If no response is received after that time, the request is terminated.</para>

<itemizedlist>
<listitem>
<para><error code="C0078">It is a <glossterm>dynamic error</glossterm>
if <option>fail-on-timeout</option> is specified as
<literal>true</literal> and a value is given for
<option>timeout</option> and the <tag>p:http-request</tag> is not finished in the
time specified by <option>timeout</option>.</error>
</para>
</listitem>
<listitem>
<para>If <code>fail-on-timeout</code> is <literal>false</literal>, a
<code>c:response</code> document with <code>status=408</code> is
generated.</para>
</listitem>
<listitem>
<para>If no value is given for <code>fail-on-timeout</code>,
<literal>false</literal> is assumed. If no value is given for
<code>timeout</code>, <code>fail-on-timeout</code> is ignored.</para>
</listitem>
</itemizedlist>

<note>
<title>Note</title>
<para>Please note the difference between option <code>p:timeout</code>
on <code>p:http-request</code> and the attribute <code>timeout</code>
in combination with <code>fail-on-timeout="true"</code> on
<code>c:request</code>. If the step does not finish in the set time,
<code>D0053</code> is raised. If the request does not finish in time
and fail-on-timeout is true, <code>C0078</code> is raised. The actual
times after which a timeout is detected may also differ slightly.
</para>
</note>

  <para>The <code>c:header</code> element specifies a
header name and value, either for inclusion in a request, or as received in a response.</para>

<e:rng-pattern name="VocabHeader" xml:id="cv.header"/>

<para>The request is formulated from the attribute values on the
<tag>c:request</tag> element and its
<tag>c:header</tag> and <tag>c:multipart</tag> or <tag>c:body</tag> children,
if present, and transmitted to the host (and port, if present) specified by the
<code>href</code> attribute.  The details of how the request entity body, if any, is
constructed are given in <xref linkend="c.response_body"/>.</para>

<para>When the request is formulated, the step and/or protocol
implementation may add headers as necessary to either complete the
request or as appropriate for the content specified (e.g. transfer
encodings). A user of this step is guaranteed that their requested
headers and content will be sent with the exception of any conflicts
with protocol-related headers.</para>

<para>The <tag>p:http-request</tag> step allows users to specify
independently values that are not always independent. For example,
some combinations of <tag>c:header</tag> values
(e.g., <literal>Content-Type</literal>)
may be inconsistent
with values that the step and/or protocol implementation must set. In
a few cases, the step provides more than one mechanism to specify what
is actually a single value (e.g., the boundary string in multipart
messages).
<error code="C0020">It is a
<glossterm>dynamic error</glossterm> if the the user specifies a value
or values that are inconsistent with each other or with the requirements
of the step or protocol.</error>
</para>
</section>

<section xml:id="c.request_body">
<title>Request Entity body conversion</title>

<para>The <code>c:multipart</code> element specifies a multi-part
body, per <biblioref linkend="rfc1521"/>, either for inclusion in a
request or as received in a response.</para>

<e:rng-pattern name="VocabMultipart" xml:id="cv.multipart"/>

<para>In the context of a request, the media type of the
<tag>c:multipart</tag> <rfc2119>must</rfc2119> be a multipart media
type (i.e. have a main type of 'multipart'). If the
<code>content-type</code> attribute is not specified, a value of
“<literal>multipart/mixed</literal>” will be assumed. (<impl>Whether
or not, and to what extent, “<literal>multipart/byte-ranges</literal>”
responses are supported is
<glossterm>implementation-defined</glossterm>.)</impl>
</para>

<para>The <code>boundary</code> attribute is required and is used to
provide a multipart boundary marker. The implementation must use this
boundary marker and must prefix the value with the string
“<literal>--</literal>” when formulating the multipart message. <error code="C0002">It is a <glossterm>dynamic error</glossterm> if the value
starts with the string “<literal>--</literal>”.</error></para>

<para>If the boundary is also specified as a parameter in the
<option>content-type</option> option, then the parameter value specified
and the <option>boundary</option> value specified <rfc2119>must</rfc2119>
be the same. If the boundary is specified in both the <option>boundary</option>
option and the <option>content-type</option> option then the two values
<rfc2119>must</rfc2119> be the same.</para>

<para>The <tag>c:body</tag> element holds the body or body part of the message.  Each of the attributes holds controls some aspect of the encoding the request body or decoding the body element's content when the request is formulated.  These are specified as follows:</para>

<e:rng-pattern name="VocabBody" xml:id="cv.body"/>

<para>The <code>content-type</code> attribute specifies the media type
of the body or body part, that is, the value of its
<code>Content-Type</code> header. If the media type is not an XML type
or text, the content must already be base64-encoded.</para>

<para>The <code>encoding</code> attribute controls the decoding of the
element content for formulating the body. A value of
<literal>base64</literal> indicates the element's content is a base64
encoded string whose byte stream should be sent as the message body.
<impl>An implementation may support encodings other than
<literal>base64</literal> but these encodings and their names are
<glossterm>implementation-defined</glossterm>.</impl>
<error code="C0052">It is a <glossterm>dynamic
error</glossterm> if the encoding specified is not supported by the
implementation.</error></para>

<note xml:id="note-single-set-ser">
<para>The <tag>p:http-request</tag> step provides only a single set of
serialization options for XML media types. There's no direct support
for sending a multipart message with two XML parts encoded
differently.</para>
</note>

<para>For each body or body part, the <code>id</code> attribute
specifies the value of the <code>Content-ID</code> header;
the <code>description</code> attribute specifies the
value of the <code>Content-Description</code> header;
and the <code>disposition</code> attribute specifies the value
of the <code>Content-Disposition</code> header.
</para>

<para>If an entity body is to be sent as part of a request (e.g. a
<code>POST</code>), either a <tag>c:body</tag> element, specifying the
request entity body, or a <tag>c:multipart</tag> element, specifying
multiple entity body parts, may be used. When <tag>c:multipart</tag>
is used it may contain multiple <tag>c:body</tag> children. A
<tag>c:body</tag> specifies the construction of a body or body part as
follows:</para>

<para>If the <code>content-type</code> attribute does not specify an
XML media type, or the <code>encoding</code> attribute is
“<literal>base64</literal>”, then <error code="C0028">it is a
<glossterm>dynamic error</glossterm> if the content of the
<tag>c:body</tag> element does not consist entirely of
characters</error>, and the entity body or body part will consist of
exactly those characters.</para>

<para>Otherwise (the <code>content-type</code> attribute
<emphasis>does</emphasis> specify an XML media type and the
<code>encoding</code> attribute is <emphasis>not</emphasis> 'base64'),
<error code="C0022">it is a <glossterm>dynamic error</glossterm> if
the content of the <tag>c:body</tag> element does not consist of
exactly one element, optionally preceded and/or followed by any number
of processing instructions, comments or whitespace characters</error>,
and the entity body or body part will consist of the serialization of
a document node containing that content. The serialization of that
document is controlled by the serialization options on the
<code>p:http-request</code> step itself.</para>

<para>For example, the following input to a
<code>p:http-request</code> step will POST a small XML
document:</para>

<programlisting language="xml">&lt;c:request method="POST" href="http://example.com/someservice"&gt;
&lt;c:body xmlns:c="http://www.w3.org/ns/xproc-step" content-type="application/xml"&gt;
&lt;doc&gt;
&lt;title&gt;My document&lt;/title&gt;
&lt;/doc&gt;
&lt;/c:body&gt;
&lt;/c:request&gt;
</programlisting>
  <para>The corresponding request should look something like this:</para>

  <programlisting language="xml">POST http://example.com/someservice HTTP/1.1
Host: example.com
Content-Type: application/xml; charset="utf-8"

&lt;?xml version='1.0'?&gt;
&lt;doc&gt;
&lt;title&gt;My document&lt;/title&gt;
&lt;/doc&gt;
</programlisting>
</section>

<section xml:id="c.request_response">
<title>Managing the response</title>

<note xml:id="ednote-content-types" role="editorial">
<para>Where do we say that for URI schemes (such as
<code>file:</code> and <code>ftp:</code>) where a content type is not
provided by the underlying request, the content type is
implementation-dependent?</para>
</note>

<para>The handling of the response to the request and the generation
of the step's result document is controlled by the
<code>status-only</code>, <code>override-content-type</code> and
<code>detailed</code> attributes on the <tag>c:request</tag>
input.</para>

<para>The <code>override-content-type</code> attribute controls
interpretation of the response's <code>Content-Type</code> header. If
this attribute is present, the response will be treated as if it
returned the <code>Content-Type</code> given by its value. This
original <code>Content-Type</code> header will however be reflected
unchanged as a <tag>c:header</tag> in the result document. <error code="C0030">It is a <glossterm>dynamic error</glossterm> if the
<code>override-content-type</code> value cannot be used (e.g.
<code>text/plain</code> to override
<code>image/png</code>).</error></para>

<para>If the <code>override-content-type</code> includes an encoding
parameter, then that encoding <rfc2119>must</rfc2119> be used to
read the document.</para>

<para>If the <code>status-only</code> attribute has the value
<literal>true</literal>, the result document will contain only header
information. The entity of the response will not be processed to
produce a <tag>c:body</tag> or <tag>c:multipart</tag> element.</para>

<para>The <tag>c:response</tag> element represents an HTTP response.
The response's status code is encoded in the <code>status</code>
attribute and the headers and entity body are processing into
<tag>c:header</tag> and <tag>c:multipart</tag> or <tag>c:body</tag>
content.</para>

<e:rng-pattern name="VocabHttpResponse" xml:id="c.response"/>

<para>The value of the <code>detailed</code> attribute determines the
content of the result document. If it is <literal>true</literal>, the
response to the request is handled as follows:</para>

<orderedlist>
<listitem><para>A single <tag>c:response</tag> element is produced with the <code>status</code> attribute containing the status of the response received.</para></listitem>
<listitem><para>Each response header is translated into a <tag>c:header</tag> element.</para></listitem>
<listitem><para>Unless the <code>status-only</code> attribute has a value
<literal>true</literal>, the entity body of the response is converted into
a <tag>c:body</tag> or <tag>c:multipart</tag> element via the rules given in
 <xref linkend="c.response_body"/>.</para></listitem>
</orderedlist>

<para>Otherwise (the <code>detailed</code> attribute is not specified
or its value is <literal>false</literal>), the response to the request
is handled as follows:</para>

<orderedlist>
<listitem><para>If the media type (as determined by the
<code>override-content-type</code> attribute or the
<code>Content-Type</code> response header) is an XML media type, the
entity is decoded if necessary, then parsed as an XML document:</para>

<itemizedlist>
<listitem>
<para>The parser which <tag>p:http-request</tag> employs
<rfc2119>must</rfc2119> process the external subset; all general and
external parsed entities <rfc2119>must</rfc2119> be fully expanded.</para>

<note xml:id="ednote-parser" role="editorial">
<title>Editorial Note</title>
<para>The requirement to process the external subset comes from p:load,
we probably don't want to impose that on all p:http-request calls.
Need a way to control it?</para>
</note>

</listitem>
<listitem>
<para>It
<rfc2119>may</rfc2119> perform <tag class="attribute">xml:id</tag>
processing, but it <rfc2119>must not</rfc2119> perform any other
processing, such as expanding XIncludes.</para>
</listitem>
<listitem>
<para>The parser
<rfc2119>must</rfc2119> be conformant to <citetitle>Namespaces in
XML</citetitle>.</para>
</listitem>
<listitem>
<para>Parsing the document
<rfc2119>must not</rfc2119> fail due to validation errors.
</para>
</listitem>
</itemizedlist>

<para>The resulting XML document is
produced on the <code>result</code> output port as the entire output
of the step.</para>

</listitem>
<listitem><para>Otherwise, the entity body of the response is converted into
a <tag>c:body</tag> or <tag>c:multipart</tag> element via the rules given in
<xref linkend="c.response_body"/>.</para></listitem>
</orderedlist>

<para>In either case the base URI of the output document is the resolved value
of the <code>href</code> attribute from the input <tag>c:request</tag>.</para>

<section xml:id="redirects">
<title>Redirects</title>

<para>One possible response from an HTTP request is a redirect,
indicated by a status code in the three-hundred range. The precise
semantics of the 3xx return codes are laid out by section
<citetitle>10.3 Redirection 3xx</citetitle> in <biblioref linkend="rfc2616"/>.
</para>

<para>The <tag>p:http-request</tag> step <rfc2119>should</rfc2119> follow
redirect requests (in a manner consistent with <biblioref linkend="rfc2616"/>)
if they are returned by the server.
</para>
</section>

<section xml:id="cookies">
<title>Cookies</title>

<para>With one exception, in version 1.0 of XProc, the
<tag>p:http-request</tag> step does not provide any standard
mechanisms for managing cookies. <impl>Pipeline authors that need to
preserve cookies across several <tag>p:http-request</tag> calls in the
same pipeline or across multiple invocations of the same or different
pipelines will have to rely on
<glossterm>implementation-defined</glossterm> mechanisms.</impl>
</para>

<para>The exception arises in the case of redirection. If a redirect
response includes cookies, those cookies <rfc2119>should</rfc2119> be
forwarded as appropriate to the redirected location when the
redirection is followed.</para>

<para>This behavior will allow the <tag>p:http-request</tag> step to
interoperate with web services that use cookies as part of an
authentication protocol.</para>

</section>
 </section>

<section xml:id="c.response_body">
<title>Converting Response Entity Bodies</title>

<para>The entity of a response may be multipart per <biblioref linkend="rfc1521"/>. In those situations, the result document will be
a <tag>c:multipart</tag> element that contains multiple
<tag>c:body</tag> elements inside.</para>

<note xml:id="note-multipart-multipart">
<para>Although it is technically possible for any of the individual
parts of a multipart message to <emphasis>also</emphasis> be
multipart, XProc does not provide a standard representation for such
messages. <impl>The interpretation of a multipart message inside
another multipart message is
<glossterm>implementation-dependent</glossterm>.</impl></para>
</note>

<para>The result of the <tag>p:http-request</tag> step is an XML
document. For media types (images, binaries, etc.) that can't be
represented as a sequence of Unicode characters, the response is
encoded as <literal>base64</literal>
and then returned as text children of the <tag>c:body</tag> element.
If the content is base64-encoded, the <tag class="attribute">encoding</tag> attribute on <tag>c:body</tag> must
be set to “<literal>base64</literal>”.</para>

<note xml:id="ednote-non-xml" role="editorial">
<title>Editorial Note</title>
<para>This section hasn't been updated to reflect the fact that
non-XML documents are now possible. It should probably say
something like:</para>
<para>If the document identified has a non-XML content type, no extra
processing is mandated. The number and variety of media types
that an implementation can load is
implementation-defined.</para>
</note>

<para>If the media type of the response
is a text type with a
<code>charset</code> parameter that is a Unicode character encoding
(per <biblioref linkend="unicodetr17"/>) or
is recognized as a non-XML media type whose contents are encoded as a
sequence of Unicode characters (e.g. it has a character parameter or
the definition of the media type is such that it requires Unicode),
the content of the constructed <tag>c:body</tag> element is the translation
of the text into a sequence of Unicode characters.</para>

<para>If the response is an XML media type, the content of the
constructed <tag>c:body</tag> element is the result of decoding the
body as necessary, then parsing it with an XML parser.</para>

<itemizedlist>
<listitem>
<para>The parser which <tag>p:http-request</tag> employs
<rfc2119>must</rfc2119> process the external subset; all general and
external parsed entities <rfc2119>must</rfc2119> be fully expanded.</para>

<note xml:id="ednote-parser" role="editorial">
<title>Editorial Note</title>
<para>The requirement to process the external subset comes from p:load,
we probably don't want to impose that on all p:http-request calls.
Need a way to control it?</para>
</note>

</listitem>
<listitem>
<para>It
<rfc2119>may</rfc2119> perform <tag class="attribute">xml:id</tag>
processing, but it <rfc2119>must not</rfc2119> perform any other
processing, such as expanding XIncludes.</para>
</listitem>
<listitem>
<para>The parser
<rfc2119>must</rfc2119> be conformant to <citetitle>Namespaces in
XML</citetitle>.</para>
</listitem>
<listitem>
<para>Parsing the document
<rfc2119>must not</rfc2119> fail due to validation errors.
</para>
</listitem>
</itemizedlist>

<para>If the content
is not well-formed, the step fails.</para>

<note xml:id="ednote-combine-parsing" role="editorial">
<title>Editorial Note</title>
<para>This prose should be consolidated into a single place.</para>
</note>

<para>In a <tag>c:body</tag> in a response, the
<tag class="attribute">content-type</tag> attribute <rfc2119>must</rfc2119>
be an exact copy of the value returned in the
<literal>Content-Type</literal> header. That is, it must reflect the
content type actually returned, not any override value that may have been
specified, and it must include any parameters returned by the server.</para>

<para>In the case of a multipart response, the same rules apply when
constructing a <tag>c:body</tag> element for each body part
encountered.</para>

<note xml:id="note-text-html">
<para>Given the above description, any content identified as
<code>text/html</code> will be encoded as (escaped) text or
base64-encoded in the <tag>c:body</tag> element, as HTML isn't always
well-formed XML. A user can attempt to convert such content into XML
using the <tag>p:unescape-markup</tag> step.</para>
</note>
</section>

<section xml:id="example-http-request">
<title>HTTP Request Example</title>

<para>A simple form might be posted as follows:</para>
<programlisting language="xml">&lt;c:request method="POST" href="http://www.example.com/form-action" xmlns:c="http://www.w3.org/ns/xproc-step"&gt;
&lt;c:body content-type="application/x-www-form-urlencoded"&gt;
name=W3C&amp;amp;spec=XProc
&lt;/c:body&gt;
&lt;/c:request&gt;</programlisting>
<para>and if the response was an XHTML document, the result document would be:</para>
<programlisting language="xml">&lt;c:response status="200" xmlns:c="http://www.w3.org/ns/xproc-step"&gt;
&lt;c:header name="Date" value=" Wed, 09 May 2007 23:12:24 GMT"/&gt;
&lt;c:header name="Server" value="Apache/1.3.37 (Unix) PHP/4.4.5"/&gt;
&lt;c:header name="Vary" value="negotiate,accept"/&gt;
&lt;c:header name="TCN" value="choice"/&gt;
&lt;c:header name="P3P" value="policyref='http://www.w3.org/2001/05/P3P/p3p.xml'"/&gt;
&lt;c:header name="Cache-Control" value="max-age=600"/&gt;
&lt;c:header name="Expires" value="Wed, 09 May 2007 23:22:24 GMT"/&gt;
&lt;c:header name="Last-Modified" value="Tue, 08 May 2007 16:10:49 GMT"/&gt;
&lt;c:header name="ETag" value="'4640a109;42380ddc'"/&gt;
&lt;c:header name="Accept-Ranges" value="bytes"/&gt;
&lt;c:header name="Keep-Alive" value="timeout=2, max=100"/&gt;
&lt;c:header name="Connection" value="Keep-Alive"/&gt;
&lt;c:body content-type="application/xhtml+xml"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;&lt;title&gt;OK&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;&lt;p&gt;OK!&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
&lt;/c:body&gt;
&lt;/c:response&gt;</programlisting>
</section>

<simplesect>
<title>Document properties</title>
<para feature="http-request-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.identity">
<title>p:identity</title>

<para>The <code>p:identity</code> step makes a verbatim copy of its input
available on its output.</para>

<p:declare-step type="p:identity">
  <p:input port="source" sequence="true" content-types="*/*"/>
  <p:output port="result" sequence="true" content-types="*/*"/>
</p:declare-step>

<para>If the implementation supports passing PSVI annotations between
steps, the <tag>p:identity</tag> step <rfc2119>must</rfc2119> preserve
any annotations that appear in the input.</para>

<simplesect>
<title>Document properties</title>
<para feature="identity-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.in-scope-names">
<title>p:in-scope-names</title>

<para>The <code>p:in-scope-names</code> step exposes all of the
in-scope variables and options as a set of parameters in a
<tag>c:param-set</tag> document.</para>

<p:declare-step type="p:in-scope-names">
  <p:output port="result" content-types="application/xml"/>
</p:declare-step>

<para>Each in-scope variable and option is converted into a
<tag>c:param</tag> element.
The resulting <tag>c:param</tag> elements are wrapped in a 
<tag>c:param-set</tag> and the parameter set document is written
to the <port>result</port> port.
<impl>The
order in which <tag>c:param</tag> elements occur in the <tag>c:param-set</tag> is
<glossterm>implementation-dependent</glossterm>.</impl></para>

<para>For consistency and user convenience, if any of the variables or options
have names that are in a namespace, the
<tag class="attribute">namespace</tag> attribute on the
<tag>c:param</tag> element <rfc2119>must</rfc2119> be used. Each
<tag class="attribute">name</tag> <rfc2119>must</rfc2119> be an NCName.</para>

<para>The base URI of the output document is the URI of the pipeline document
that contains the step.</para>

<para>For consistency with the <tag>p:parameters</tag> step, the
<port>result</port> port is not primary.</para>

<simplesect xml:id="ex-in-scope-names" role="tocsuppress">
<title>Example</title>

<para>This unlikely pipeline demonstrates the behavior of <tag>p:in-scope-names</tag>:
</para>

<programlisting>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                name="main" version="1.0"&gt;
&lt;p:output port="result"&gt;
  &lt;p:pipe step="vars" port="result"/&gt;
&lt;/p:output&gt;

&lt;p:option name="username" required="true"/&gt;
&lt;p:option name="password" required="true"/&gt;
&lt;p:variable name="host" select="'http://example.com/'"/&gt;

&lt;p:in-scope-names name="vars"/&gt;

&lt;/p:declare-step&gt;</programlisting>

<para>Assuming the values supplied for the username and password
options are “<literal>user</literal>” and “<literal>pass</literal>”,
respectively, the output would be:</para>

<programlisting>&lt;c:param-set xmlns:c="http://www.w3.org/ns/xproc-step"&gt;
  &lt;c:param name="username" namespace="" value="user"/&gt;
  &lt;c:param name="host" namespace="" value="http://example.com/"/&gt;
  &lt;c:param name="password" namespace="" value="pass"/&gt;
&lt;/c:param-set&gt;</programlisting>

</simplesect>

<simplesect>
<title>Document properties</title>
<para feature="in-scope-names-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.insert">
<title>p:insert</title>

<para>The <code>p:insert</code> step inserts the
<code>insertion</code> port's document into the <port>source</port>
port's document relative to the matching elements in the
<code>source</code> port's document.</para>

<p:declare-step type="p:insert">
   <p:input port="source" primary="true" content-types="application/xml text/xml */*+xml"/>
   <p:input port="insertion" sequence="true" content-types="application/xml text/* */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
   <p:option name="position" required="true" as="xs:token" values="('first-child','last-child','before','after')"/>
</p:declare-step>

<para>The value of the <option>match</option> option
<rfc2119>must</rfc2119> be an XSLTSelectionPattern. <error code="C0023">It
is a <glossterm>dynamic error</glossterm> if that pattern matches
an attribute or a namespace node.</error>
Multiple matches are
allowed, in which case multiple copies of the <port>insertion</port>
documents will occur. If no elements match, then the document is
unchanged.</para>

<para>The value of the <option>position</option> option <rfc2119>must</rfc2119> be an NMTOKEN in
the following list:
</para>

<itemizedlist>
<listitem>
<para>“<literal>first-child</literal>” - the insertion is made as the first child of the match;</para>
</listitem>
<listitem>
<para>“<literal>last-child</literal>” - the insertion is made as the last child of the match;</para>
</listitem>
<listitem>
<para>“<literal>before</literal>” - the insertion is made as the immediate preceding sibling of the match;</para>
</listitem>
<listitem>
<para>“<literal>after</literal>” - the insertion is made as the immediate following sibling of the match.</para>
</listitem>
</itemizedlist>

<para><error code="C0025">It is a <glossterm>dynamic error</glossterm>
if the match pattern matches anything other than an element or a document
node and the value of the <option>position</option> option is
“<literal>first-child</literal>” or
“<literal>last-child</literal>”.</error> <error code="C0024">It is a
<glossterm>dynamic error</glossterm> if the match pattern matches a document
node and the value of the <option>position</option> is “<literal>before</literal>” or
“<literal>after</literal>”.</error></para>

<para>As the inserted elements are part of the output of the step they
are not considered in determining matching elements. If an empty sequence
appears on the <port>insertion</port> port, the result will be the same
as the source.</para>

<simplesect>
<title>Document properties</title>
<para feature="insert-preserves-all">All document properties on the
<port>source</port> port are preserved. No document properties on the
<port>insertion</port> port are preserved.</para>
</simplesect>
</section>
<section xml:id="c.label-elements">
<title>p:label-elements</title>

<para>The <code>p:label-elements</code> step generates a label for each matched
element and stores that label in the specified attribute.</para>

<p:declare-step type="p:label-elements">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="attribute" as="xs:QName" select="'xml:id'"/>
  <p:option name="label" as="xs:string" select="'concat(&#34;_&#34;,$p:index)'" e:type="XPathExpression"/>
  <p:option name="match" as="xs:string" select="'*'" e:type="XSLTSelectionPattern"/>
  <p:option name="replace" as="xs:boolean" select="true()"/>
</p:declare-step>

<para>The value of the <option>label</option> option is an XPath
expression used to generate the value of the attribute label.</para>

<para>The value of the <option>match</option> option
<rfc2119>must</rfc2119> be an XSLTSelectionPattern. <error code="C0023">It
is a <glossterm>dynamic error</glossterm> if that expression matches
anything other than element nodes.</error></para>

<para>The value of the <option>replace</option>
<rfc2119>must</rfc2119> be a boolean value and is used to indicate
whether existing attribute values are replaced.</para>

<para>This step operates by generating attribute labels for each
element matched. For every matched element, the expression is
evaluated with the context node set to the matched element. An
attribute is added to the matched element using the attribute name is
specified the <option>attribute</option> option and the string value
of result of evaluating the expression. If the attribute already
exists on the matched element, the value is replaced with the string
value only if the <option>replace</option> option has the value of
<literal>true</literal>.</para>

<para>If this step is used to add or change the value
of an attribute named “<literal>xml:base</literal>”, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<para>An implementation must bind the variable
“<literal>p:index</literal>” in the static context of each evaluation
of the XPath expression to the position of the element in the sequence
of matched elements. In other words, the first element (in document
order) matched gets the value “<literal>1</literal>”, the second gets
the value “<literal>2</literal>”, the third, “<literal>3</literal>”,
etc.</para>

<para>The result of the p:label-elements step is the input document with the
attribute labels associated with matched elements.  All other non-matching content
remains the same.</para>

<simplesect>
<title>Document properties</title>
<para feature="label-elements-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.load">
<title>p:load</title>

<para>The <code>p:load</code> step has no inputs but produces as its
result a document (or documents) specified by an IRI.</para>

<p:declare-step type="p:load">
  <p:output port="result" sequence="true" content-types="*/*"/>
  <p:option name="href" required="true" as="xs:anyURI"/>
  <p:option name="parameters" as="map(xs:QName,item()*)?"/>
  <p:option name="content-type" as="xs:string?"/>
  <p:option name="document-properties" as="map(xs:QName, item()*)?"/>
</p:declare-step>

<para><error code="D0064">It is a <glossterm>dynamic error</glossterm> if
the <option>href</option> URI is not a valid <type>xs:anyURI</type>.</error>
If the <option>href</option> is relative, it is made absolute
against the base URI of the element on which it is specified
(<tag>p:with-option</tag> or <tag>p:load</tag> in the case of a
syntactic shortcut value).</para>

<para>The document or documents identified by the
<option>href</option> URI are loaded and returned. If the URI protocol
supports redirection, then redirects <rfc2119>must</rfc2119> be
followed.</para>

<para><error code="D0011">It is a <glossterm>dynamic error</glossterm>
if the resource referenced by a <code>p:load</code> element does not exist
or cannot be accessed.</error></para>

<para>The behavior of this step depends on the content type of the
document or documents loaded. The content type of each document is
determined as follows:</para>

<orderedlist>
<listitem>
<para>If a <property>content-type</property> property is specified
in <option>document-properties</option> or <option>content-type</option> is present,
then each document <rfc2119>must</rfc2119> be interpreted according to
that content type. <error code="D0062">It is a <glossterm>dynamic error</glossterm>
if the <tag class="attribute">content-type</tag> is specified and the
document-properties has a “<code>content-type</code>” that is not the
same.</error>
</para>
</listitem>
<listitem>
<para>If the documents are retrieved with a URI protocol that specifies
a content type (for example, <literal>http:</literal>), then the document
<rfc2119>must</rfc2119> be interpreted according to that content type.
</para>
</listitem>
<listitem>
<para><impl>In the absence of an explicit type, the content
type is <glossterm>implementation-defined</glossterm></impl>.</para>
</listitem>
</orderedlist>

<para>The <option>parameters</option> map contains additional, optional
parameters that may influence the way that content is loaded. The interpretation
of this map varies according to the content type. Parameter names that are in
no namespace are treated as strings using only the local-name where appropriate.</para>

<para>Broadly speaking, there are five categories of data that might
be loaded:
<link linkend="c.load.xml">XML</link>,
<link linkend="c.load.text">text</link>,
<link linkend="c.load.json">JSON</link>,
<link linkend="c.load.html">HTML</link>,
and “other”
<link linkend="c.load.binary">binary</link> data.</para>

<section xml:id="c.load.xml">
<title>Loading XML data</title>

<para>For an XML media type, the content is loaded and parsed as XML.</para>

<para><error code="D0049">It is a <glossterm>dynamic error</glossterm> if
the loaded content is not a well-formed XML document.</error></para>

<para>If the <option>dtd-validate</option> parameter is <literal>true</literal>,
then DTD validation must be performed when parsing the document.
<error code="D0023">It is a <glossterm>dynamic error</glossterm> if a DTD validation
is performed and either the document is not valid or no DTD is found.</error>
<error code="D0043">It is a <glossterm>dynamic error</glossterm>
if the <option>dtd-validate</option> parameter is <literal>true</literal> and
the processor does not support DTD validation.</error></para>

<para><impl>Additional XML parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>
</section>

<section xml:id="c.load.text">
<title>Loading text data</title>
<para>For a text media type, the content is loaded as a text document. (A text
document is an XPath data model document consisting of a single text node.)</para>

<para><error code="D0060">It is a <glossterm>dynamic error</glossterm> if the
<option>content-type</option> specifies an encoding, which is not supported
by the processor.</error></para>

<para><impl>Text parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>

</section>

<section xml:id="c.load.json">
<title>Loading JSON data</title>

<para>For a JSON media type, the content is loaded and parsed as JSON.</para>

<para>The parameters specified for the <code>fn:parse-json</code> function
in <biblioref linkend="xpath31-functions"/>
<rfc2119>must</rfc2119> be supported.
<impl>Additional JSON parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>
<para><error code="D0057">It is a <glossterm>dynamic error</glossterm> if the loaded content
does not conform to the JSON grammar, unless the parameter <option>liberal</option> is
<literal>true</literal> and the processor chooses to accept the deviation.</error></para>

<para><error code="D0058">It is a <glossterm>dynamic error</glossterm> if the parameter
<option>duplicates</option> is <literal>reject</literal> and the value of
loaded content contains a JSON object with duplicate keys.</error></para>

<para><error code="D0059">It is a <glossterm>dynamic error</glossterm> if the parameter
map contains an entry whose key is defined in the specification of
<code>fn:parse-json</code> and whose value is not valid for that key, or if it contains
an entry with the key fallback when the parameter <option>escape</option> with
<literal>true()</literal> is also present.</error></para>
</section>

<section xml:id="c.load.html">
<title>Loading HTML data</title>

<para>For an HTML media type, the content is loaded and parsed into an
XPath data model
document that contains a tree of elements, attributes, and other nodes.</para>

<para><impl>The precise way in which HTML documents are parsed into the
XPath data model is <glossterm>implementation-defined</glossterm>.</impl>
</para>

<para><impl>HTML parameters are <glossterm>implementation-defined</glossterm>.
</impl></para>
</section>

<section xml:id="c.load.binary">
<title>Loading binary data</title>

<para>An XProc processor may load other, arbitrary data types. <impl>How a
processor interprets other media types is <glossterm>implementation-defined</glossterm>.
</impl>
</para>

<para><impl>Parameters for other media types
are <glossterm>implementation-defined</glossterm>.
</impl></para>
</section>

<simplesect>
<title>Document properties</title>
<para feature="load-preserves-none">No document properties are preserved.
The properties specified in <option>document-properties</option> are applied.
</para>
</simplesect>
</section>
<section xml:id="c.load-directory-list">
<title>p:load-directory-list</title>

  <para>The <code>p:load-directory-list</code> step has no inputs but produces as its result a sequence of documents
    loaded from a directory, specified by an IRI. If the directory's IRI is relative, it is made absolute against the
    base URI of the element on which it is specified (<tag>p:with-option</tag> or <tag>p:load-directory-list</tag> in
    the case of a syntactic shortcut value).</para>

<p:declare-step type="p:load-directory-list">
  <p:output port="result" content-type="application/xml"/>
  <p:option name="path" required="true" as="xs:anyURI"/>
  <p:option name="include-filter" as="xs:string*" e:type="RegularExpression"/>
  <p:option name="exclude-filter" as="xs:string*" e:type="RegularExpression"/>
</p:declare-step>

<para><impl>Conformant processors <rfc2119>must</rfc2119> support directory paths whose
scheme is <code>file</code>. It is
<glossterm>implementation-defined</glossterm> what other schemes are
supported by <tag>p:load-directory-list</tag>, and what the interpretation
of 'directory', 'file' and 'contents' is for those schemes.</impl>
</para>

<para><error code="C0017">It is a
<glossterm>dynamic error</glossterm> if the absolute path does not
identify a directory.</error> <error code="C0012">It is a
<glossterm>dynamic error</glossterm> if the contents of the directory
path are not available to the step due to access restrictions in the
environment in which the pipeline is run.</error></para>

<para>If present, the value of the <option>include-filter</option>
or <option>exclude-filter</option>
option <rfc2119>must</rfc2119> be a regular expression as specified in
<biblioref linkend="xpath31-functions"/>,section 7.61 “<literal>Regular Expression
Syntax</literal>”.</para>

<para>If the <option>include-filter</option> pattern matches a
directory entry's name, the entry is included in the output. If the
<option>exclude-filter</option> pattern matches a directory entry's name,
the entry is excluded in the output. If both options are provided, the
include filter is processed first, then the exclude filter. As a result: An
item is included if it matches (at least) one of the
  <option>include-filter</option> values and none of the
  <option>exclude-filter</option> values.</para>

<simplesect>
<title>Document properties</title>
<para feature="directory-list-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.make-absolute-uris">
<title>p:make-absolute-uris</title>

<para>The <code>p:make-absolute-uris</code> step makes an element or
attribute's value in the source document an absolute IRI value in the
result document.</para>

<p:declare-step type="p:make-absolute-uris">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
  <p:option name="base-uri" as="xs:anyURI?"/>
</p:declare-step>

<para>The value of the <option>match</option> option <rfc2119>must</rfc2119> be an
XSLTSelectionPattern.
<error code="C0023">It is a <glossterm>dynamic error</glossterm> if
the pattern matches anything other than element or attribute
nodes.</error></para>

<para>The value of the <option>base-uri</option> option
<rfc2119>must</rfc2119> be an <type>anyURI</type>. It is interpreted
as an IRI reference. If it is relative, it is made absolute against
the base URI of the element on which it is specified
(<tag>p:with-option</tag> or <tag>p:make-absolute-uris</tag> in the case of
a syntactic shortcut
value).</para>

<para>For every element or attribute in the input document which
matches the specified pattern, its XPath string-value is resolved
against the specified base URI and the resulting absolute IRI is used
as the matched node's entire contents in the output.</para>

<para>The base URI used for resolution defaults to the matched
attribute's element or the matched element's base URI unless the
<option>base-uri</option> option is specified. When the
<option>base-uri</option> option is specified, the option value is
used as the base URI regardless of any contextual base URI value in
the document. This option value is resolved against the base URI of
the <tag>p:option</tag> element used to set the option.</para>

<para><impl>If the IRI reference specified by the <option>base-uri</option> option
on <tag>p:make-absolute-uris</tag> is
not valid, or if it is absent and the input document has no base URI,
the results are <glossterm>implementation-dependent</glossterm>.</impl>
</para>

<simplesect>
<title>Document properties</title>
<para feature="make-absolute-uris-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.namespace-rename">
<title>p:namespace-rename</title>

<para>The <code>p:namespace-rename</code> step renames any namespace declaration or
use of a namespace in a document to a new IRI value.</para>

 <p:declare-step type="p:namespace-rename">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="from" required="true" as="xs:anyURI"/>
   <p:option name="to" required="true" as="xs:anyURI"/>
   <p:option name="apply-to" as="xs:token" select="'all'" values="('all','elements','attributes')"/>
</p:declare-step>

<para>The value of the <option>from</option> option
<rfc2119>must</rfc2119> be an <type>anyURI</type>. It
<rfc2119>should</rfc2119> be either empty or absolute, but will not be
resolved in any case.</para>

<para>The value of the <option>to</option> option
<rfc2119>must</rfc2119> be an <type>anyURI</type>. It
<rfc2119>should</rfc2119> be empty or absolute, but will not be
resolved in any case.</para>

<para>The value of the <option>apply-to</option> option
<rfc2119>must</rfc2119> be one of “<literal>all</literal>”,
“<literal>elements</literal>”, or “<literal>attributes</literal>”.
If the value is “<literal>elements</literal>”, only elements will be
renamed, if the value is “<literal>attributes</literal>”, only attributes
will be renamed, if the value is “<literal>all</literal>”, both elements
and attributes will be renamed.</para>

<para><error code="C0014">It is a <glossterm>dynamic error</glossterm>
if the XML namespace (<uri>http://www.w3.org/XML/1998/namespace</uri>)
or the
XMLNS namespace (<uri>http://www.w3.org/2000/xmlns/</uri>) is
the value of either the <option>from</option> option or the
<option>to</option> option.</error></para>

<para>If the value of the <option>from</option> option is the same as
the value of the <option>to</option> option, the input is reproduced
unchanged on the output. Otherwise, namespace bindings, namespace
attributes and element and attribute names are changed as
follows:</para>

<itemizedlist>
  <listitem>
   <para>Namespace bindings:  If the <option>from</option> option is present
and its value is not the empty string,
then every binding of a prefix (or the default namespace) in the input
document whose value is the same as the value of the <option>from</option>
option is</para>
   <itemizedlist>
    <listitem>
     <para>replaced in the output with a binding to the value of the <option>to</option>
option, provided it is present and not the empty string;</para>
    </listitem>
    <listitem>
     <para>otherwise (the <option>to</option> option is
not specified or has an empty string as its value) absent from the output.</para>
    </listitem>
   </itemizedlist>
   <para>If the <option>from</option> option is absent, or its value is the empty string,
then no bindings are changed or removed.</para>
  </listitem>
  <listitem>
   <para>Elements and attributes: If the <option>from</option> option is present
and its value is not the empty string, for every element and attribute,
as appropriate, in the input whose namespace name is the same as the value of the
<option>from</option> option, in the output its namespace name is</para>
   <itemizedlist>
    <listitem>
     <para>replaced with the value of the <option>to</option>
option, provided it is present and not the empty string;</para>
    </listitem>
    <listitem>
     <para>otherwise (the <option>to</option> option is
not specified or has an empty string as its value) changed to have no value.</para>
    </listitem>
   </itemizedlist>
   <para>If the <option>from</option> option is absent, or its value
   is the empty string, then for every element and attribute, as appropriate,
   whose namespace name has no value, in the
   output its namespace name is set to the value of the
   <option>to</option> option.</para>
  </listitem>
  <listitem>
   <para>Namespace attributes:  If the <option>from</option> option is present
and its value is not the empty string, for every namespace attribute in the
input whose value is the same as the value of the <option>from</option> option, in the output</para>
   <itemizedlist>
    <listitem>
     <para>the namespace attribute's value is replaced with the value of the <option>to</option>
option, provided it is present and not the empty string;</para>
    </listitem>
    <listitem>
     <para>otherwise (the <option>to</option> option is
not specified or has an empty string as its value) the namespace attribute is absent.</para>
    </listitem>
   </itemizedlist>
  </listitem>
 </itemizedlist>

<note xml:id="note-apply-to">
<para>The <option>apply-to</option> option is primarily intended to make
it possible to avoid renaming attributes when the <option>from</option> option
specifies no namespace, since many attributes are in no namespace.</para>

<para>Care should be taken when specifying no namespace with the
<option>to</option> option.  Prefixed names in content, for example QNames and
XPath expressions, may end up with no appropriate namespace binding.</para></note>

<simplesect>
<title>Document properties</title>
<para feature="namespace-rename-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.os-cwd">
  <title>p:os-cwd</title>

  <para>The <code>p:os-cwd</code> step returns the current working directory.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
  </note>

  <p:declare-step type="p:os-cwd">
    <p:output port="result" content-types="application/xml" primary="true"/>
  </p:declare-step>

  <para>The step returns a single <tag>c:result</tag> element containing the current working directory. On systems which have no concept of
    a working directory the resulting <tag>c:result</tag> element will be empty.</para>

  <simplesect>
    <title>Document properties</title>
    <para feature="store-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.os-env">
  <title>p:os-env</title>

  <para>The <code>p:os-env</code> step returns information about the operating system environment on which the processor
    is running.</para>

  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
  </note>

  <p:declare-step type="p:os-env">
    <p:output port="result" content-types="application/xml" primary="true"/>
  </p:declare-step>

  <para>The <tag>p:os-env</tag> step returns information about the operating system environment. It returns a
      <tag>c:result</tag> element containing zero or more <tag>c:env</tag> elements. Each <tag>c:env</tag> element has a
      <tag class="attribute">name</tag> and a <tag class="attribute">value</tag> attribute containing the name and value
    of an environment variable. </para>
  <para>On systems which have no concept of an environment, this step returns an empty <tag>c:result</tag>
    element.</para>

  <simplesect>
    <title>Document properties</title>
    <para feature="store-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.os-info">
  <title>p:os-info</title>

  <para>The <code>p:os-info</code> step returns information about the operating system on which the processor is
    running.</para>
  
  <note role="editorial">
    <title>Editorial Note</title>
    <para>TBD: This is an almost direct port from EXProc. Details might still change.</para>
  </note>

  <p:declare-step type="p:os-info">
    <p:output port="result" content-types="application/xml" primary="true"/>
  </p:declare-step>

  <para>The step returns a <tag>c:result</tag> element with attributes describing properties of the system. It
    <rfc2119>should</rfc2119> include the following properties:</para>

  <variablelist>
    <varlistentry>
      <term><tag class="attribute">file-separator</tag></term>
      <listitem>
        <para>The file separator; usually <code>"/"</code> on Unix, <code>"\"</code> on Windows.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">path-separator</tag></term>
      <listitem>
        <para>The path separator; usually <code>":"</code> on Unix, <code>";"</code> on Windows.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">os-architecture</tag></term>
      <listitem>
        <para>The operating system architecture, for example <code>"i386"</code>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">os-name</tag></term>
      <listitem>
        <para>The name of the operating system, for example <code>"Mac OS X"</code>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">os-version</tag></term>
      <listitem>
        <para>The version of the operating system, for example <code>"10.5.6"</code>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">cwd</tag></term>
      <listitem>
        <para>The current working directory. On systems which have no concept of a working directory the value of the
          attribute will be empty.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">user-name</tag></term>
      <listitem>
        <para>The login name of the effective user, for example <code>"ndw"</code>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><tag class="attribute">user-home</tag></term>
      <listitem>
        <para>The home directory of the effective user, for example <code>"/home/ndw"</code>.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The exact set of properties returned is implementation-dependent.</para>
  
  <simplesect>
    <title>Document properties</title>
    <para feature="store-preserves-none">No document properties are preserved.</para>
  </simplesect>

</section>
<section xml:id="c.pack">
<title>p:pack</title>

<para>The <code>p:pack</code> step merges two document sequences in a pair-wise
fashion.</para>

<p:declare-step type="p:pack">
   <p:input port="source" content-types="application/xml text/xml */*+xml" sequence="true" primary="true"/>
   <p:input port="alternate" sequence="true" content-types="application/xml"/>
   <p:output port="result" sequence="true"/>
   <p:option name="wrapper" required="true" as="xs:QName"/>
</p:declare-step>

<para>The step takes each pair of documents, in order, one from the
<port>source</port> port and one from the <port>alternate</port> port,
wraps them with a new element node whose QName is the value specified
in the <option>wrapper</option> option, and writes that element to the
<port>result</port> port as a document.</para>

<para>If the step reaches the end of one input sequence before the
other, then it simply wraps each of the remaining documents in the
longer sequence.</para>

<note xml:id="note-two-docs">
<para>In the common case, where the document element of a document in
the <port>result</port> sequence has two element children, any
comments, processing instructions, or white space text nodes that
occur between them may have come from either of the input documents;
this step does not attempt to distinguish which one.</para>
</note>

<simplesect>
<title>Document properties</title>
<para feature="pack-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.parameters">
<title>p:parameters</title>

<para>The <code>p:parameters</code> step exposes a set of parameters
as a <tag>c:param-set</tag> document.</para>

<p:declare-step type="p:parameters">
   <p:output port="result" content-types="application/xml"/>
   <p:option name="parameters" as="map(xs:QName,item()*)?"/>
</p:declare-step>

<para>Each parameter in the <option>parameters</option> map is converted into a
<tag>c:param</tag> element.
The resulting <tag>c:param</tag> elements are wrapped in a
<tag>c:param-set</tag> and the parameter set document is written
to the <port>result</port> port.
<impl>The
order in which <tag>c:param</tag> elements occur in the <tag>c:param-set</tag> is
<glossterm>implementation-dependent</glossterm>.</impl></para>

<para>For consistency and user convenience, <emphasis>in the output of <tag>p:parameters</tag></emphasis>,
if any of the parameters have names that are in a namespace, the
<tag class="attribute">namespace</tag> attribute on the
<tag>c:param</tag> element <rfc2119>must</rfc2119> be used. Each
<tag class="attribute">name</tag> <rfc2119>must</rfc2119> be an NCName.</para>

<para>The base URI of the output document is the URI of the pipeline document
that contains the step.</para>

<section xml:id="cv.param">
<title>The c:param element</title>

<para>A <tag>c:param</tag> is a standard XML representation of a parameter.
</para>

<e:rng-pattern name="VocabParam"/>

<para>The attributes that can occur on <tag>c:param</tag> are:</para>

<variablelist>
<varlistentry><term><tag class="attribute">name</tag></term>
<listitem>
<para>The <tag class="attribute">name</tag> attribute of the
<tag>c:param</tag> must have the lexical form of a QName.
(In the output of some steps, such as <tag>p:parameters</tag>, the name will
always be an <type>xs:NCName</type>, but that is not a general requirement
for user-constructed <tag>c:param</tag> elements )
</para>

<para>If the <tag class="attribute">namespace</tag> attribute is not
specified, and the <tag class="attribute">name</tag> contains a colon,
then the expanded name of the parameter is constructed using the <tag class="attribute">name</tag> value and the namespace declarations
in-scope on the <tag>c:param</tag> element.
<error code="C0087">It is a <glossterm>dynamic
error</glossterm> if the <tag class="attribute">namespace</tag>
attribute is not specified, the <tag class="attribute">name</tag> contains
a colon, and the specified prefix is not in the in-scope
namespace bindings.</error>
</para>

<para>If the <tag class="attribute">namespace</tag> attribute is not
specified, and the <tag class="attribute">name</tag> does not contain
a colon, then the expanded name of the parameter is in no
namespace.</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">namespace</tag></term>
<listitem>
<para>The namespace URI of the parameter name.</para>
<para>If the <tag class="attribute">namespace</tag> attribute is
specified, then the expanded name of the parameter is constructed from
the specified namespace and the <tag class="attribute">name</tag>
value. <error code="C0083">It is a <glossterm>dynamic
error</glossterm> if the <tag class="attribute">namespace</tag>
attribute is specified, the <tag class="attribute">name</tag> contains
a colon, and the specified namespace is not the same as the in-scope
namespace binding for the specified prefix.</error>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">value</tag></term>
<listitem>
<para>If the parameter value is an atomic type, a lexical representation of its
value appears in the <tag class="attribute">value</tag> attribute.
<error code="C0087">It is a
<glossterm>dynamic error</glossterm> if the <tag class="attribute">value</tag> attribute
is specified and the <tag>c:param</tag> element is not empty.</error>
</para>
</listitem>
</varlistentry>
<varlistentry><term><tag class="attribute">as</tag></term>
<listitem>
<para>The <tag class="attribute">as</tag> attribute specifies the <biblioref linkend="xpath31"/> <link xlink:href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence
type</link> of the parameter value. <error code="C0089">It is a
<glossterm>dynamic error</glossterm> if the sequence type is not
syntactically valid.</error> The sequence type
<literal>item()*</literal> is assumed if no explicit type is provided.
<error code="D0036">It is a <glossterm>dynamic error</glossterm> if
the supplied value of a variable or option cannot be converted to the
required type.</error>
</para>
</listitem>
</varlistentry>
<varlistentry><term>Other attributes</term>
<listitem>
<para>Any namespace-qualified attribute names that appear on the
<tag>c:param</tag> element are ignored. <error code="C0085">It is a
<glossterm>dynamic error</glossterm> for any unqualified attribute
names other than “<literal>name</literal>”,
“<literal>namespace</literal>”, “<literal>as</literal>”, or “<literal>value</literal>” to
appear on a <tag>c:param</tag> element.</error></para>
</listitem>
</varlistentry>
</variablelist>

<para>If the <tag>c:param</tag> element is not empty, then its content, interpreted
as a sequence of XML nodes, is the value of the parameter.</para>
</section>

<section xml:id="cv.param-set">
<title>The c:param-set element</title>

<para>A <tag>c:param-set</tag> represents a set of parameters on a
parameter input.</para>

<e:rng-pattern name="VocabParamSet"/>

<para>The <tag>c:param-set</tag> contains zero or more
<tag>c:param</tag> elements. <error code="C0084">It is a
<glossterm>dynamic error</glossterm> if the parameter list contains
any elements other than <tag>c:param</tag>.</error></para>

<para>Any namespace-qualified attribute names that appear on the
<tag>c:param-set</tag> element are ignored. <error code="C0086">It is
a <glossterm>dynamic error</glossterm> for any unqualified attribute
names to appear on a <tag>c:param-set</tag>
element.</error></para>
</section>

<simplesect>
<title>Document properties</title>
<para feature="parameters-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.rename">
<title>p:rename</title>

<para>The <code>p:rename</code> step renames elements, attributes, or
processing-instruction targets in a document.</para>

<p:declare-step type="p:rename">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
  <p:option name="new-name" required="true" as="xs:QName"/>
</p:declare-step>

<para>The value of the <option>match</option> option must be an
XSLTSelectionPattern. <error code="C0023">It is a <glossterm>dynamic
error</glossterm> if the pattern matches anything other than element,
attribute or processing instruction nodes.</error></para>

<para>Each element, attribute, or processing-instruction in the input
matched by the match pattern specified in the <option>match</option>
option is renamed in the output to the name specified by the
<option>new-name</option> option.</para>

<para>If the <option>match</option> option matches an attribute and if
the element on which it occurs already has an attribute whose expanded
name is the same as the expanded name of the specified
<option>new-name</option>, then the results is as if the current
attribute named “<replaceable>new-name</replaceable>” was deleted before
renaming the matched attribute.</para>

<para>With respect to attributes named “<literal>xml:base</literal>”, the
following semantics apply: renaming an <emphasis>from</emphasis>
“<literal>xml:base</literal>” <emphasis>to</emphasis> something else has
no effect on the underlying base URI of the element; however,
if an attribute is renamed <emphasis>from</emphasis> something else
<emphasis>to</emphasis> “<literal>xml:base</literal>”, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<para>If the pattern matches processing instructions, then it is the
processing instruction target that is renamed. <error code="C0013">It
is a <glossterm>dynamic error</glossterm> if the pattern matches
a processing instruction and the new name has a non-null namespace.</error>
</para>

<simplesect>
<title>Document properties</title>
<para feature="rename-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.replace">
<title>p:replace</title>

<para>The <code>p:replace</code> step replaces matching nodes in
its primary input with the document element of the
<code>replacement</code> port's document.</para>

<p:declare-step type="p:replace">
   <p:input port="source" primary="true" content-types="application/xml text/xml */*+xml"/>
   <p:input port="replacement" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
</p:declare-step>

<para>The value of the <option>match</option> option
<rfc2119>must</rfc2119> be an XSLTSelectionPattern. <error code="C0023">It
is a <glossterm>dynamic error</glossterm> if that pattern matches
anything other than element, text, processing-instruction, or comment
nodes. </error> Multiple matches are allowed, in which case multiple
copies of the <port>replacement</port> document will occur.</para>

<para>Every node in the primary input matching the specified
pattern is replaced in the output is replaced by the document element
of the <port>replacement</port> document. Only non-nested matches are
replaced. That is, once a node is replaced, its descendants cannot
be matched.</para>

<simplesect>
<title>Document properties</title>
<para feature="replace-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.set-attributes">
<title>p:set-attributes</title>

<para>The <tag>p:set-attributes</tag> step sets attributes on
matching elements.</para>

<p:declare-step type="p:set-attributes">
   <p:input port="source" primary="true" content-types="application/xml text/xml */*+xml"/>
   <p:input port="attributes" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
</p:declare-step>

 <para>The value of the <option>match</option> option <rfc2119>must</rfc2119> be an
 XSLTSelectionPattern. <error code="C0023">It is a <glossterm>dynamic
 error</glossterm> if that pattern matches anything other than element
 nodes.</error></para>

<para>Each attribute on the document element of the document that
appears on the <port>attributes</port> port is copied to each element
that matches the <option>match</option> expression.</para>

<para>If an attribute with the same name as one of the attributes to
be copied already exists, the value specified on the
<port>attribute</port> port's document is used. The result port of
this step produces a copy of the <port>source</port> port's document
with the matching elements' attributes modified.</para>

<para>The matching elements are specified by the match pattern in the
<option>match</option> option. All matching elements are processed.
If no elements match, the step will not change any elements.</para>

<para>This step must not copy namespace declarations.  If the attributes
copied from the <port>attributes</port> use namespaces, prefixes, or
prefixes bound to different namespaces, the document produced on the
<port>result</port> output port will require namespace fixup.</para>

<para>If an attribute named
<tag class="attribute">xml:base</tag> is added or changed, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<simplesect>
<title>Document properties</title>
<para feature="set-attributes-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.set-properties">
<title>p:set-properties</title>

<para>The <tag>p:set-properties</tag> step sets document
properties on the source document.</para>

<p:declare-step type="p:set-properties">
   <p:input port="source" content-types="*/*"/>
   <p:output port="result" content-types="*/*"/>
   <p:option name="properties" required="true" as="map(xs:QName,item()*)"/>
   <p:option name="merge" default="false()" as="xs:boolean"/>
</p:declare-step>

 <para>The document properties of the document
on the <port>source</port> port are augmented with the values specified
in the <option>properties</option> option. The document produced on
the <port>result</port> port has the same representation but the
adjusted property values.</para>

<para feature="p-set-properties-merge">If the <option>merge</option>
option is true, then the supplied properties are added to the existing
properties. If it is false, the document’s properties are replaced by
the new set.</para>

<para><error code="C0069">It is a <glossterm>dynamic
error</glossterm> if the <option>properties</option> map contains
a key equal to the string “<literal>content-type</literal>”.</error>
</para>

<simplesect>
<title>Document properties</title>
<para feature="set-properties-preserves-some">If <option>merge</option> is
true, document properties not overridden by settings in the <option>properties</option>
map are  preserved, otherwise the resulting document has the properties specified in
the <option>properties</option> map.
</para>
</simplesect>
</section>
<section xml:id="c.sink">
<title>p:sink</title>

<para>The <tag>p:sink</tag> step accepts a sequence of documents and
discards them. It has no output.</para>

<p:declare-step type="p:sink">
   <p:input port="source" content-types="*/*" sequence="true"/>
</p:declare-step>

<simplesect>
<title>Document properties</title>
<para feature="sing-preserves-na">Not applicable.</para>
</simplesect>
</section>
<section xml:id="c.split-sequence">
<title>p:split-sequence</title>

<para>The <tag>p:split-sequence</tag> step accepts a sequence of
documents and divides it into two sequences.</para>

<p:declare-step type="p:split-sequence">
  <p:input port="source" content-types="application/xml text/xml */*+xml" sequence="true"/>
  <p:output port="matched" sequence="true" primary="true" content-types="application/xml"/>
  <p:output port="not-matched" sequence="true" content-types="application/xml"/>
  <p:option name="initial-only" as="xs:boolean" select="false()"/>
  <p:option name="test" required="true" as="xs:string" e:type="XPathExpression"/>
</p:declare-step>

 <para>The value of the <option>test</option> option <rfc2119>must</rfc2119> be an XPathExpression.</para>

<para>The XPath expression in the <option>test</option> option is
applied to each document in the input sequence. If the effective
boolean value of the expression is true, the document is copied to the
<port>matched</port> port; otherwise it is copied to the
<port>not-matched</port> port.</para>

<para>If the <option>initial-only</option> option is true, then when
the first document that does not satisfy the test expression is
encountered, it <emphasis>and all the documents that follow
it</emphasis> are written to the <port>not-matched</port> port.
In other words, it only writes the initial series of matched
documents (which may be empty) to the <port>matched</port> port.
All other documents are written to the <port>not-matched</port> port,
irrespective of whether or not they match.</para>

<para>The XPath context for the
<option>test</option> option changes over time. For each document that
appears on the <code>source</code> port, the expression is evaluated
with that document as the context document. The context position
(<code>position()</code>) is the position of that document within the
sequence and the context size (<code>last()</code>) is the total
number of documents in the sequence.</para>

<note xml:id="note-stream">
<para>In principle, this component cannot stream because it must
buffer all of the input sequence in order to find the context size. In
practice, if the test expression does not use the
<function>last()</function> function, the implementation can stream
and ignore the context size.</para>
</note>

<para>If the implementation supports passing PSVI annotations between
steps, the <tag>p:split-sequence</tag> step <rfc2119>must</rfc2119> preserve
any annotations that appear in the input.</para>

<simplesect>
<title>Document properties</title>
<para feature="split-sequence-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.store">
<title>p:store</title>

<para>The <tag>p:store</tag> step stores (a possibly serialized
version of) its input to a URI. This step outputs a reference to the
location of the stored document.</para>

<p:declare-step type="p:store">
  <p:input port="source" content-types="*/*"/>
  <p:output port="result" content-types="application/xml" primary="true"/>
  <p:option name="href" required="true" as="xs:anyURI"/>
  <p:option name="serialization" as="map(xs:string,xs:anyAtomicType)?"/>
</p:declare-step>

<para>The value of the <option>href</option> option
<rfc2119>must</rfc2119> be an <type>anyURI</type>. If it is relative,
it is made absolute against the base URI of the element on which it is
specified (<tag>p:with-option</tag> or <tag>p:store</tag> in the case
of a syntactic shortcut
value).</para>

<para>The step attempts to store the XML document to the specified
URI. <error code="C0050">It is a <glossterm>dynamic error</glossterm>
if the URI scheme is not supported or the step cannot store to the
specified location.</error></para>

<para>The output of this step is a document containing a single
<tag>c:result</tag> element whose content is the absolute URI of the
document stored by the step.</para>

<para>The <option>serialization</option> option is provided to control the
serialization of content when it is stored. Serialization is described in
<biblioref linkend="xproc30"/>.</para>

<simplesect>
<title>Document properties</title>
<para feature="store-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.string-replace">
<title>p:string-replace</title>

<para>The <tag>p:string-replace</tag> step matches nodes in the
document provided on the <port>source</port> port and replaces them
with the string result of evaluating an XPath expression.</para>

<p:declare-step type="p:string-replace">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
   <p:option name="replace" required="true" as="xs:string" e:type="XPathExpression"/>
</p:declare-step>

<para>The value of the <option>match</option> option <rfc2119>must</rfc2119> be an
XSLTSelectionPattern.</para>

<para>The value of the <option>replace</option> option <rfc2119>must</rfc2119> be an
XPathExpression.</para>

<para>The matched nodes are specified with the match pattern in the
<option>match</option> option.
For each matching node, the XPath
expression provided by the <option>replace</option> option is
evaluated with the matching node as the XPath context node.
The string value of the result is used in the output.
Nodes that do not match are copied without change.</para>

<para>If the expression given in the <option>match</option> option
matches an <emphasis>attribute</emphasis>, the string value of the
<option>replace</option>
expression is used as the new value of the attribute in the output.
If the attribute is named “<tag class="attribute">xml:base</tag>”, the base URI
of the element <rfc2119>must</rfc2119> also be amended accordingly.</para>

<para>If the expression matches any other kind of node, the entire
node (and <emphasis>not</emphasis> just its contents) is replaced by
the string value of the <option>replace</option> expression.</para>

<simplesect>
<title>Document properties</title>
<para feature="string-replace-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.tee">
<title>p:tee</title>

<para>The <tag>p:tee</tag> step stores (a possibly serialized
version of) its input to a URI. The step outputs its input unchanged.</para>

  <p:declare-step type="p:tee">
    <p:input port="source" content-types="*/*" sequence="true"/>
    <p:output port="result" sequence="true" content-types="*/*"/>
    <p:option name="href" required="true" as="xs:anyURI"/>
    <p:option name="serialization" as="map(xs:QName,item()*)?"/>
    <p:option name="enable" as="xs:boolean" select="true()"/>
  </p:declare-step>

<para>The value of the <option>href</option> option <rfc2119>must</rfc2119> be an <type>anyURI</type>. If it is
    relative, it is made absolute against the base URI of the element on which it is specified (<tag>p:with-option</tag>
    or <tag>p:tee</tag> in the case of a syntactic shortcut value).</para>

<para>The step attempts to store the document to the specified
URI. <error code="C0050">It is a <glossterm>dynamic error</glossterm>
if the URI scheme is not supported or the step cannot store to the
specified location.</error></para>

<para>The output of this step is what appears on its input port, unchanged.</para>

<para>The <option>serialization</option> option is provided to control the
serialization of content when it is stored. Serialization is described in
<biblioref linkend="xproc30"/>.</para>

  <para>If the <option>enabled</option> option is false, no attempt to store the document will be made. The step will
    act exactly like a <tag>p:identity</tag> step. The values for <option>href</option> and
      <option>serialization</option> will be ignored.</para>

<simplesect>
<title>Document properties</title>
  <para feature="tee-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.unescape-markup">
<title>p:unescape-markup</title>

<para>The <tag>p:unescape-markup</tag> step takes the string value of
the document element and parses the content as if it was a Unicode
character stream containing serialized XML. The output consists of the
same document element with children that result from the parse. This
is the reverse of the <tag>p:escape-markup</tag> step.</para>

<p:declare-step type="p:unescape-markup">
  <p:input port="source" content-types="application/xml text/xml */*+xml text/*"/>
  <p:output port="result" content-types="application/xml text/xml */*+xml"/>
  <p:option name="namespace" as="xs:anyURI?"/>
  <p:option name="content-type" as="xs:string" select="'application/xml'"/>
  <p:option name="encoding" as="xs:string?"/>
  <p:option name="charset" as="xs:string?"/>
</p:declare-step>

<para>The value of the <option>namespace</option> option
<rfc2119>must</rfc2119> be an <type>anyURI</type>. It
<rfc2119>should</rfc2119> be absolute, but will not be
resolved.</para>

<para>When the string value is parsed, the original document element
is preserved so that the result will be well-formed XML even if the
content consists of multiple, sibling elements.</para>

<para>The <option>namespace</option> option specifies a default
namespace. Elements that are in no namespace in the unescaped content
will be placed into this namespace unless there is an in-scope namespace
declaration that specifies a different namespace (or explicitly undeclares
the default namespace).</para>

<para>The <option>content-type</option> option <rfc2119>may</rfc2119>
be used to specify an alternate content type for the string value. An
implementation <rfc2119>may</rfc2119> use a different parser to
produce XML content depending on the specified content-type. For
example, an implementation might provide an HTML to XHTML parser (e.g.
<biblioref linkend="tidy"/> or <biblioref linkend="tagsoup"/>) for the
content type '<literal>text/html</literal>'.</para>

<para>All implementations <rfc2119>must</rfc2119> support the content
type <literal>application/xml</literal>, and must use a standard XML
parser for it. <error code="C0051">It is a <glossterm>dynamic
error</glossterm> if the content-type specified is not supported by
the implementation.</error>
<impl>Behavior of
<tag>p:unescape-markup</tag> for <option>content-type</option>s other
than <literal>application/xml</literal> is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>The <option>encoding</option> option specifies how the data is
encoded. All implementations <rfc2119>must</rfc2119> support the
<literal>base64</literal> encoding (and the absence of an encoding
option, which implies that the content is plain Unicode text).
<error code="C0052">It is a <glossterm>dynamic error</glossterm> if the
encoding specified is not supported by the
implementation.</error></para>

<para>If an <option>encoding</option> is specified, a
<option>charset</option> may also be specified.
The character set may be specified as a parameter on the
<option>content-type</option> or via the separate
<option>charset</option> option. If it is specified in both places,
the value of the <option>charset</option> option
<rfc2119>must</rfc2119> be used.</para>

<para>If the specified
<option>encoding</option> is <literal>base64</literal>,
then the character set
<rfc2119>must</rfc2119> be specified.
<error code="C0010">It is a <glossterm>dynamic error</glossterm>
if an encoding of <literal>base64</literal> is specified and
the character set is not specified or if the specified
character set is not supported by the implementation.</error>
</para>

<para>The octet-stream that results from decoding the
text <rfc2119>must</rfc2119> be interpreted using the character encoding named by
the value of the <option>charset</option> option
to produce a sequence of Unicode characters to parse.</para>

<para>If no <option>encoding</option> is specified, the character set
is ignored, irrespective of where it was specified.</para>

<para>For example, with the 'namespace' option set to the XHTML
namespace, the following input:</para>

<programlisting language="xml">&lt;description&gt;
&amp;lt;p&gt;This is a chunk.&amp;lt;/p&gt;
&amp;lt;p&gt;This is a another chunk.&amp;lt;/p&gt;
&lt;/description&gt;</programlisting>

<para>would produce:</para>

<programlisting language="xml">&lt;description&gt;
&lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;This is a chunk.&lt;/p&gt;
&lt;p xmlns="http://www.w3.org/1999/xhtml"&gt;This is a another chunk.&lt;/p&gt;
&lt;/description&gt;</programlisting>

<simplesect>
<title>Document properties</title>
<para feature="unescape-markup-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.unwrap">
<title>p:unwrap</title>

<para>The <tag>p:unwrap</tag> step replaces matched elements with their
children.</para>

<p:declare-step type="p:unwrap">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
</p:declare-step>

 <para>The value of the <option>match</option> option <rfc2119>must</rfc2119> be an
 XSLTSelectionPattern. <error code="C0023">It is a <glossterm>dynamic
 error</glossterm> if that pattern matches anything other than element
 nodes.</error></para>

<para>Every element in the <port>source</port> document that matches
the specified <option>match</option> pattern is replaced by its children,
effectively “unwrapping” the children from their parent. Non-element nodes
and unmatched elements are passed through unchanged.</para>

<note xml:id="note-match-doc">
<para>The matching applies to the entire document, not just the “top-most”
matches. A pattern of the form <literal>h:div</literal> will replace
<emphasis>all</emphasis> <tag>h:div</tag> elements, not just the top-most
ones.</para>
</note>

<para>This step produces a single document; if the document element is
unwrapped, the result might not be well-formed XML.</para>

<simplesect>
<title>Document properties</title>
<para feature="unwrap-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.uuid">
<title>p:uuid</title>

<para>The <tag>p:uuid</tag> step generates a
<biblioref linkend="bib.uuid"/> and injects it into
the <port>source</port> document.</para>

<p:declare-step type="p:uuid">
  <p:input port="source" primary="true" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="match" as="xs:string" select="'/*'" e:type="XSLTSelectionPattern"/>
  <p:option name="version" as="xs:integer?"/>
</p:declare-step>

<para>The value of the <option>match</option> option must be an
XSLTSelectionPattern. The value of the <option>version</option> option
must be an integer.</para>

<para>If the <option>version</option> is specified, that version of
UUID must be computed. <error code="C0060">It is a <glossterm>dynamic
error</glossterm> if the processor does not support the specified
<option>version</option> of the UUID algorithm.</error> <impl>If the
<option>version</option> is not specified, the version of UUID
computed is
<glossterm>implementation-defined</glossterm>.</impl></para>

<para>Implementations <rfc2119>must</rfc2119> support version 4 UUIDs.
<impl>Support for other versions of UUID, and the mechanism by which
the necessary inputs are made available for computing other versions,
is <glossterm>implementation-defined</glossterm>.</impl>
</para>

<para>The matched nodes are specified with the match pattern in the
<option>match</option> option. For each matching node, the generated
UUID is used in the output (if more than one node matches, the
<emphasis>same</emphasis> UUID is used in each match). Nodes that do not
match are copied without change.</para>

<para>If the expression given in the <option>match</option> option
matches an <emphasis>attribute</emphasis>, the UUID is used as the new
value of the attribute in the output. If the attribute is named “<tag class="attribute">xml:base</tag>”, the base URI of the element
<rfc2119>must</rfc2119> also be amended accordingly.</para>

<para>If the expression matches any
other kind of node, the entire node (and <emphasis>not</emphasis> just
its contents) is replaced by the UUID.</para>

<simplesect>
<title>Document properties</title>
<para feature="uuid-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.wrap-sequence">
<title>p:wrap-sequence</title>

<para>The <tag>p:wrap-sequence</tag> step accepts a sequence of
documents and produces either a single document or a new sequence of
documents.</para>

<p:declare-step type="p:wrap-sequence">
   <p:input port="source" content-types="application/xml */*+xml text/*" sequence="true"/>
   <p:output port="result" sequence="true" content-types="application/xml"/>
   <p:option name="wrapper" required="true" as="xs:QName"/>
   <p:option name="group-adjacent" as="xs:string?" e:type="XPathExpression"/>
</p:declare-step>

<para>The value of the <option>group-adjacent</option> option
<rfc2119>must</rfc2119> be an XPathExpression.</para>

<para>In its simplest form, <tag>p:wrap-sequence</tag> takes a
sequence of documents and produces a single, new document by placing
each document in the <port>source</port> sequence inside a new
document element as sequential siblings. The name of the document
element is the value specified in the <option>wrapper</option>
option.</para>

<para>The <option>group-adjacent</option> option can be used to group
adjacent documents.
The XPath context
for the
<option>group-adjacent</option> option changes over time. For each document that
appears on the <code>source</code> port, the expression is evaluated
with that document as the context document. The context position
(<code>position()</code>) is the position of that document within the
sequence and the context size (<code>last()</code>) is the total
number of documents in the sequence.
Whenever
two or more sequentially adjacent documents have the same “group
adjacent” value, they are wrapped together in a single wrapper
element.
</para>

<simplesect>
<title>Document properties</title>
<para feature="wrap-sequence-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.wrap">
<title>p:wrap</title>

<para>The <tag>p:wrap</tag> step wraps matching nodes in the
<port>source</port> document with a new parent element.</para>

<p:declare-step type="p:wrap">
   <p:input port="source" content-types="application/xml text/xml */*+xml"/>
   <p:output port="result" content-types="application/xml"/>
   <p:option name="wrapper" required="true" as="xs:QName"/>
   <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
   <p:option name="group-adjacent" as="xs:string?" e:type="XPathExpression"/>
</p:declare-step>

<para>The value of the <option>match</option> option
<rfc2119>must</rfc2119> be an XSLTSelectionPattern. <error code="C0023">It
is a <glossterm>dynamic error</glossterm> if the pattern matches
anything other than document, element, text, processing instruction, and comment
nodes.</error>
</para>

<para>The value of the <option>group-adjacent</option> option
<rfc2119>must</rfc2119> be an XPathExpression.</para>

<para>If the node matched is the document node (<code>match="/"</code>),
the result is a new document where the document element is a new
element node whose QName is the value specified in the
<option>wrapper</option> option. That new element contains copies of
all of the children of the original document node.</para>

<para>When the match pattern does not match the document node,
every node that matches the specified <option>match</option>
pattern is replaced with a new element node whose QName is the value
specified in the <option>wrapper</option> option.
The content of that new element is a copy of the original,
matching node. The <tag>p:wrap</tag> step performs a "deep" wrapping, the children
of the matching node and their descendants are processed and wrappers
are added to all matching nodes.
</para>

<para>The <option>group-adjacent</option> option can be used to group
adjacent matching nodes in a single wrapper element. The specified
XPath expression is evaluated for each matching node with that node
as the XPath context node. Whenever two or more adjacent matching nodes
have the same “group adjacent” value, they are wrapped together in
a single wrapper element.</para>

<para>Two matching nodes are considered adjacent if and only if they
are siblings and either there are no nodes between them or all
intervening, non-matching nodes are whitespace text, comment, or processing
instruction nodes.</para>

<simplesect>
<title>Document properties</title>
<para feature="wrap-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.www-form-urldecode">
<title>p:www-form-urldecode</title>

<para>The <tag>p:www-form-urldecode</tag> step decodes a
<literal>x-www-form-urlencoded</literal> string into an XML representation.</para>

<p:declare-step type="p:www-form-urldecode">
  <p:output port="result" content-types="application/xml"/>
  <p:option name="value" required="true" as="xs:string"/>
</p:declare-step>

<para>The <option>value</option> option is interpreted as a string of
parameter values encoded using the
<literal>x-www-form-urlencoded</literal> algorithm. Each name/value
pair is written in a <tag>c:param</tag> element.
The entire set of parameters
is written (as a <tag>c:param-set</tag>) on the <port>result</port>
output port.</para>

<para><error code="C0037">It is a
<glossterm>dynamic error</glossterm> if the <option>value</option> provided
is not a properly
<literal>x-www-form-urlencoded</literal> value.</error>
<error code="C0061">It is a
<glossterm>dynamic error</glossterm> if the name of any encoded parameter
name is not a valid <type>xs:NCName</type>.</error> In other words, this
step can only decode simple name/value pairs where the names do not contain
colons or any characters that cannot be used in XML names.
</para>

<para>The order of the <tag>c:param</tag> elements in the result is the same
as the order of the encoded parameters, reading from left to right.</para>

<para>If any parameter name occurs more than once in the encoded string,
the resulting parameter set will contain a <tag>c:param</tag> for
each instance.</para>

<simplesect>
<title>Document properties</title>
<para feature="www-form-urldecode-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.www-form-urlencode">
<title>p:www-form-urlencode</title>

<para>The <tag>p:www-form-urlencode</tag> step encodes a set of parameter
values as a <literal>x-www-form-urlencoded</literal> string and
injects it into the <port>source</port> document.</para>

<p:declare-step type="p:www-form-urlencode">
  <p:input port="source" primary="true" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml"/>
  <p:option name="parameters" as="map(xs:QName,item()*)?"/>
  <p:option name="match" required="true" as="xs:string" e:type="XSLTSelectionPattern"/>
</p:declare-step>

<para>The value of the <option>match</option> option must be an
XSLTSelectionPattern.</para>

<para>The set of parameters is encoded as a single
<literal>x-www-form-urlencoded</literal> string of name/value pairs.
When parameters are encoded into name/value pairs,
<emphasis>only</emphasis> the local name of each parameter is used.
The namespace name is ignored and no prefix or colon appears in the name.
</para>

<para><impl>The order of the parameters
is <glossterm>implementation-dependent</glossterm>.</impl></para>

<para>The matched nodes are specified with the match pattern in the
<option>match</option> option. For each matching node, the encoded
string is used in the output. Nodes that do not
match are copied without change.</para>

<para>If the expression given in the <option>match</option> option
matches an <emphasis>attribute</emphasis>, the encoded
string is used as the new value of the attribute in the output.
If the expression matches any other kind of node, the entire
node (and <emphasis>not</emphasis> just its contents) is replaced by
the encoded string.</para>

<simplesect>
<title>Document properties</title>
<para feature="www-form-urlencode-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.xinclude">
<title>p:xinclude</title>

<para>The <tag>p:xinclude</tag> step applies <biblioref linkend="xinclude"/> processing to the <port>source</port> document.</para>

<p:declare-step type="p:xinclude">
  <p:input port="source" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" content-types="application/xml text/xml */*+xml"/>
  <p:option name="fixup-xml-base" as="xs:boolean" select="false()"/>
  <p:option name="fixup-xml-lang" as="xs:boolean" select="false()"/>
</p:declare-step>

<para>The value of the <option>fixup-xml-base</option> option <rfc2119>must</rfc2119> be a
boolean. If it is true, base URI fixup will be performed as per
<biblioref linkend="xinclude"/>.</para>

<para>The value of the <option>fixup-xml-lang</option> option <rfc2119>must</rfc2119> be a
boolean. If it is true, language fixup will be performed as per
<biblioref linkend="xinclude"/>.</para>

<para>The included documents are located with the base URI of the
input document and are not provided as input to the step.</para>

<para><error code="C0029">It is a <glossterm>dynamic error</glossterm>
if an XInclude error occurs during processing.</error> </para>

<simplesect>
<title>Document properties</title>
<para feature="xinclude-preserves-all">All document properties are preserved.</para>
</simplesect>
</section>
<section xml:id="c.xslt">
<title>p:xslt</title>

<para>The <tag>p:xslt</tag> step applies an XSLT stylesheet to a document.</para>

<p:declare-step type="p:xslt">
  <p:input port="source" content-types="application/xml text/xml */*+xml" sequence="true" primary="true"/>
  <p:input port="stylesheet" content-types="application/xml text/xml */*+xml"/>
  <p:output port="result" primary="true" sequence="true" content-types="*/*"/>
  <p:output port="secondary" sequence="true"/>
  <p:option name="parameters" as="map(xs:QName,item())?"/>
  <p:option name="initial-mode" as="xs:QName?"/>
  <p:option name="template-name" as="xs:QName?"/>
  <p:option name="output-base-uri" as="xs:anyURI?"/>
  <p:option name="version" as="xs:string?"/>
</p:declare-step>

<para>If present, the value of the <option>initial-mode</option>
option <rfc2119>must</rfc2119> be a <type>QName</type>.</para>

<para>If present, the value of the <option>template-name</option>
option <rfc2119>must</rfc2119> be a <type>QName</type>.</para>

<para>If present, the value of the <option>output-base-uri</option>
option <rfc2119>must</rfc2119> be an <type>anyURI</type>. If it is
relative, it is made absolute against the base URI of the element on
which it is specified (<tag>p:with-option</tag> or <tag>p:xslt</tag> in the
case of a syntactic shortcut
value).</para>

<para>If the step specifies a <option>version</option>, then that version
of XSLT <rfc2119>must</rfc2119> be used to process the transformation.
<error code="C0038">It is a
<glossterm>dynamic error</glossterm> if the specified version
is not available.</error> If the step does not specify a version, the
implementation may use any version it has available and may use any means
to determine what version to use, including, but not limited to,
examining the version of the stylesheet.</para>

<para>The XSLT stylesheet provided on the <port>stylesheet</port> port
is applied to the document on the <port>source</port> port. Any
parameters passed in the <option>parameters</option> option are used
to define top-level stylesheet parameters. The primary result document
of the transformation, if there is one, appears on the
<port>result</port> port. At most one document can appear on the
<port>result</port> port. All other result documents appear on the
<port>secondary</port> port. <impl>The order in which result documents
appear on the <port>secondary</port> port is
<glossterm>implementation-dependent</glossterm>.</impl> If XSLT 1.0 is
used, an empty sequence of documents <rfc2119>must</rfc2119> appear on
the <port>secondary</port> port.</para>

<para>If a sequence of documents is provided on the
<port>source</port> port, the first document is used as the
primary input document. The whole sequence is also the default
collection.
If no documents are provided on the <port>source</port> port,
the primary input document is undefined and the default collection
is empty.
<error code="C0039">It is a
<glossterm>dynamic error</glossterm> if a sequence of documents (including
an empty sequence) is provided
to an XSLT 1.0 step.</error>
</para>

<para>A dynamic error occurs if the XSLT processor signals a fatal
error. This includes the case where the transformation terminates due
to a <tag>xsl:message</tag> instruction with a <tag class="attribute">terminate</tag> attribute value of
“<literal>yes</literal>”. <impl>How XSLT message termination
errors are reported to the XProc processor is
<glossterm>implementation-dependent</glossterm>.</impl></para>

<para>The invocation of the transformation is controlled by the
<option>initial-mode</option> and <option>template-name</option>
options that set the initial mode and/or named template in the XSLT
transformation where processing begins. <error code="C0056">It is a
<glossterm>dynamic error</glossterm> if the specified initial mode
or named template cannot be applied to the specified stylesheet.</error>
</para>

<para>The <option>output-base-uri</option> option sets the context's
output base URI per the XSLT 2.0 specification, otherwise the base URI
of the <port>result</port> document is the base URI of the first
document in the <code>source</code> port's sequence. If the value of
the <option>output-base-uri</option> option is not absolute, it will
be resolved using the base URI of its <tag>p:option</tag>
element. An XSLT 1.0 step <rfc2119>should</rfc2119> use the value of the
<option>output-base-uri</option> as the base URI of its output, if the
option is specified.</para>

<para>If XSLT 2.0 is used, the outputs of this step
<rfc2119>may</rfc2119> include PSVI annotations.</para>


<para>The static and initial dynamic contexts of the XSLT processor
are the contexts defined in the step XPath context
with the following adjustments.</para>

<para>The dynamic context is augmented as follows:</para>

<variablelist>
<varlistentry>
<term>Context item</term>
<listitem>
<para>The first document that appears on the <port>source</port> port.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Variable values</term>
<listitem>
<para>Any parameters
passed in the <option>parameters</option> option are available as variable bindings
to the XSLT processor.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Function implementations</term>
<listitem>
<para>The function implementations provided by the XSLT processor.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Default collection</term>
<listitem>
<para>The sequence of documents provided on the <port>source</port> port.
</para>
</listitem>
</varlistentry>
</variablelist>

<simplesect>
<title>Document properties</title>
<para feature="xslt-preserves-none">No document properties are preserved.</para>
</simplesect>
</section>
</section>

<section xml:id="errors">
<title>Step Errors</title>

<para>Several of the steps in the standard step library can generate
<glossterm baseform="dynamic-error">dynamic errors</glossterm>.</para>

<para>A <termdef xml:id="dt-dynamic-error">A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</termdef> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space).</para>

<para>If a step fails due to a dynamic error, failure propagates
upwards until either a <tag>p:try</tag> is encountered or the entire
pipeline fails. In other words, outside of a <tag>p:try</tag>, step
failure causes the entire pipeline to fail.</para>

<para>The following errors can be raised by steps in this
specification:</para>

<?step-error-list level="none"?>

</section>
<appendix xml:id="conformance">
<title>Conformance</title>

<para>Conformant processors <rfc2119>must</rfc2119> implement all of the features
described in this specification except those that are explicitly identified
as optional.</para>

<para>Some aspects of processor behavior are not completely specified; those
features are either <glossterm role="unwrapped">implementation-dependent</glossterm> or
<glossterm role="unwrapped">implementation-defined</glossterm>.</para>

<para><termdef xml:id="dt-implementation-dependent">An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</termdef>
</para>

<para><termdef xml:id="dt-implementation-defined">An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</termdef>
</para>

<section xml:id="implementation-defined">
<title>Implementation-defined features</title>

<para>The following features are implementation-defined:</para>

<?implementation-defined-features?>
</section>

<section xml:id="implementation-dependent">
<title>Implementation-dependent features</title>

<para>The following features are implementation-dependent:</para>

<?implementation-dependent-features?>
</section>
</appendix>
<appendix xml:id="references" version="5.0-extension w3c-xproc">

<title>References</title>
<section xml:id="normative-references">
  <title>Normative References</title>
  <bibliolist>
    <bibliomixed xml:id="xproc30"><abbrev>XProc 3.0</abbrev>
<citetitle xlink:href="http://spec.xproc.org/">XProc 3.0:
An XML Pipeline Language</citetitle>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</bibliomixed>
    <bibliomixed xml:id="xmlschema-2"><abbrev>W3C XML Schema: Part 2</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2:
Datatypes Second Edition</citetitle>.
Paul V. Biron and Ashok Malhotra, editors.
World Wide Web Consortium, 28 October 2004.
</bibliomixed>
    <bibliomixed xml:id="xpath31"><abbrev>XPath 3.1</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xpath31/">XML Path Language (XPath)
	3.1</citetitle>. Jonathan Robie, Michael Dyck, Josh Spiegel, editors.
W3C Recommendation. 21 March 2017.</bibliomixed>
    <bibliomixed xml:id="xpath31-functions"><abbrev>XPath and XQuery Functions and Operators 3.1</abbrev>
<citetitle xlink:href="https://www.w3.org/TR/xpath-functions-31/">XPath and XQuery Functions and  Operators 3.1</citetitle>. Michael Kay, editor.
W3C Recommendation. 21 March 2017</bibliomixed>
    <bibliomixed xml:id="xinclude"><abbrev>XInclude</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xinclude/">XML Inclusions
(XInclude) Version 1.0 (Second Edition)</citetitle>. Jonathan Marsh,
David Orchard, and Daniel Veillard, editors.
W3C Recommendation. 15 November 2006.</bibliomixed>
    <bibliomixed xml:id="xml-serialization"><abbrev>Serialization</abbrev>
<citetitle xlink:href="http://www.w3.org/TR/xslt-xquery-serialization/">XSLT 2.0 and XQuery 1.0 Serialization</citetitle>.
 Scott Boag, Michael Kay, Joanne Tong, Norman Walsh, and Henry Zongaro, editors.  W3C Recommendation. 23 January 2007.</bibliomixed>
    <bibliomixed xml:id="rfc1321"><abbrev>MD5</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc1321.txt">RFC 1321:
The MD5 Message-Digest Algorithm</citetitle>.
R. Rivest. Network Working Group, IETF, April 1992.</bibliomixed>
    <bibliomixed xml:id="rfc1521"><abbrev>RFC 1521</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc1521.txt">RFC 1521:
MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for
Specifying and Describing the Format of Internet Message
Bodies</citetitle>. N. Borenstein, N. Freed, editors. Internet
Engineering Task Force. September, 1993.</bibliomixed>
    <bibliomixed xml:id="rfc2046"><abbrev>Media Types</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046:
Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</citetitle>.
N. Freed, et. al.. Network Working Group, IETF,
November, 1996.</bibliomixed>
    <bibliomixed xml:id="rfc2119"><abbrev>RFC 2119</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs to Indicate Requirement Levels</citetitle>.
S. Bradner.
Network Working Group, IETF,
Mar 1997.
</bibliomixed>
    <bibliomixed xml:id="rfc2616"><abbrev>RFC 2616</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616:
Hypertext Transfer Protocol — HTTP/1.1</citetitle>.
R. Fielding, J. Gettys, J. Mogul, et. al., editors. Internet
Engineering Task Force. June, 1999.</bibliomixed>
    <bibliomixed xml:id="rfc2617"><abbrev>RFC 2617</abbrev>
<citetitle xlink:href="http://www.ietf.org/rfc/rfc2617.txt">RFC 2617:
HTTP Authentication: Basic and Digest Access Authentication</citetitle>.
J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, L. Stewart. June, 1999
.</bibliomixed>
    <bibliomixed xml:id="unicodetr17"><abbrev>Unicode TR#17</abbrev>
<citetitle xlink:href="http://unicode.org/reports/tr17/">Unicode Technical
Report #17: Character Encoding Model</citetitle>.
Ken Whistler, Mark Davis, and Asmus Freytag, authors.
The Unicode Consortium. 11 November 2008.</bibliomixed>
    <bibliomixed xml:id="tidy"><abbrev>HTML Tidy</abbrev>
<citetitle xlink:href="http://tidy.sourceforge.net/">HTML Tidy Library
Project</citetitle>. SourceForge project.
</bibliomixed>
    <bibliomixed xml:id="tagsoup"><abbrev>TagSoup</abbrev>
<citetitle xlink:href="http://ccil.org/~cowan/XML/tagsoup/">TagSoup - Just Keep On Truckin'</citetitle>.
John Cowan.
</bibliomixed>
    <bibliomixed xml:id="bib.uuid"><abbrev>UUID</abbrev>
<citetitle xlink:href="http://www.itu.int/ITU-T/studygroups/com17/oid.html">ITU
X.667: Information technology - Open Systems Interconnection -
Procedures for the operation of OSI Registration Authorities:
Generation and registration of Universally Unique Identifiers (UUIDs)
and their use as ASN.1 Object Identifier components</citetitle>.
2004.</bibliomixed>
    <bibliomixed xml:id="bib.sha"><abbrev>SHA1</abbrev>
<citetitle xlink:href="http://www.itl.nist.gov/fipspubs/fip180-1.htm">Federal Information Processing Standards Publication 180-1: Secure Hash Standard</citetitle>.
1995.</bibliomixed>
  </bibliolist>
</section>
<section xml:id="informative-references">
  <title>Informative References</title>
  <bibliolist>
    <bibliomixed xml:id="bib.crc"><abbrev>CRC32</abbrev>
“32-Bit Cyclic Redundancy Codes for Internet Applications”,
<citetitle>The International Conference on Dependable Systems and Networks:
459</citetitle>. <biblioid class="doi">10.1109/DSN.2002.1028931</biblioid>.
P. Koopman. June 2002.
</bibliomixed>
  </bibliolist>
</section>
</appendix>

<appendix xmlns:db="http://docbook.org/ns/docbook" xml:id="glossary"><title>Glossary</title><glosslist><glossentry><glossterm>dynamic
error</glossterm><glossdef><para>A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</para></glossdef></glossentry><glossentry><glossterm>implementation-defined</glossterm><glossdef><para>An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</para></glossdef></glossentry><glossentry><glossterm>implementation-dependent</glossterm><glossdef><para>An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</para></glossdef></glossentry></glosslist></appendix>

<appendix version="5.0-extension w3c-xproc" xml:id="ancillary-files">
<title>Ancillary files</title>

<para>This specification includes by reference a number of
ancillary files.</para>

<variablelist>
<varlistentry>
<term><link xlink:href="steps.xpl"/></term>
<listitem>
<para>An XProc step library for the declared steps.
</para>
</listitem>
</varlistentry>
</variablelist>

</appendix>
<appendix version="5.0-extension w3c-xproc" xml:id="credits">
<title>Credits</title>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C. It was developed
by the <citetitle>XML Processing Model Working Group</citetitle> and edited by
Norman Walsh, Alex Miłowski, and Henry Thompson.</para>

<para>The editors of this specification extend their gratitude to everyone
who contributed to this document and all of the versions that came before it.</para>
</appendix>

</specification>